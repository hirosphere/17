

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Nov 19 07:33:22 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F18313
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 1.41
    32                           ; Generated 25/01/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F18313 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  0008                     	;# 
    74  0009                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  0010                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0013                     	;# 
    82  0014                     	;# 
    83  0015                     	;# 
    84  0015                     	;# 
    85  0016                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  0019                     	;# 
    91  001A                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  008C                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0097                     	;# 
   104  009B                     	;# 
   105  009B                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  0111                     	;# 
   112  0112                     	;# 
   113  0115                     	;# 
   114  0116                     	;# 
   115  0117                     	;# 
   116  0118                     	;# 
   117  0119                     	;# 
   118  018C                     	;# 
   119  0197                     	;# 
   120  0199                     	;# 
   121  0199                     	;# 
   122  0199                     	;# 
   123  019A                     	;# 
   124  019A                     	;# 
   125  019A                     	;# 
   126  019B                     	;# 
   127  019B                     	;# 
   128  019B                     	;# 
   129  019B                     	;# 
   130  019B                     	;# 
   131  019C                     	;# 
   132  019C                     	;# 
   133  019C                     	;# 
   134  019D                     	;# 
   135  019D                     	;# 
   136  019D                     	;# 
   137  019E                     	;# 
   138  019E                     	;# 
   139  019E                     	;# 
   140  019F                     	;# 
   141  019F                     	;# 
   142  019F                     	;# 
   143  019F                     	;# 
   144  019F                     	;# 
   145  020C                     	;# 
   146  0211                     	;# 
   147  0211                     	;# 
   148  0212                     	;# 
   149  0212                     	;# 
   150  0213                     	;# 
   151  0213                     	;# 
   152  0214                     	;# 
   153  0214                     	;# 
   154  0215                     	;# 
   155  0215                     	;# 
   156  0215                     	;# 
   157  0215                     	;# 
   158  0216                     	;# 
   159  0216                     	;# 
   160  0217                     	;# 
   161  0217                     	;# 
   162  028C                     	;# 
   163  0291                     	;# 
   164  0291                     	;# 
   165  0292                     	;# 
   166  0293                     	;# 
   167  0294                     	;# 
   168  0295                     	;# 
   169  0295                     	;# 
   170  0296                     	;# 
   171  0297                     	;# 
   172  0298                     	;# 
   173  030C                     	;# 
   174  038C                     	;# 
   175  0391                     	;# 
   176  0392                     	;# 
   177  0393                     	;# 
   178  039A                     	;# 
   179  039C                     	;# 
   180  039D                     	;# 
   181  039E                     	;# 
   182  039F                     	;# 
   183  0498                     	;# 
   184  0498                     	;# 
   185  0499                     	;# 
   186  049A                     	;# 
   187  049B                     	;# 
   188  049B                     	;# 
   189  049C                     	;# 
   190  049D                     	;# 
   191  049E                     	;# 
   192  049F                     	;# 
   193  0617                     	;# 
   194  0618                     	;# 
   195  0619                     	;# 
   196  0619                     	;# 
   197  061A                     	;# 
   198  061B                     	;# 
   199  061C                     	;# 
   200  061C                     	;# 
   201  0691                     	;# 
   202  0692                     	;# 
   203  0693                     	;# 
   204  0694                     	;# 
   205  0695                     	;# 
   206  0696                     	;# 
   207  0697                     	;# 
   208  0698                     	;# 
   209  0699                     	;# 
   210  0891                     	;# 
   211  0891                     	;# 
   212  0891                     	;# 
   213  0891                     	;# 
   214  0891                     	;# 
   215  0891                     	;# 
   216  0892                     	;# 
   217  0892                     	;# 
   218  0892                     	;# 
   219  0893                     	;# 
   220  0893                     	;# 
   221  0893                     	;# 
   222  0893                     	;# 
   223  0893                     	;# 
   224  0893                     	;# 
   225  0894                     	;# 
   226  0894                     	;# 
   227  0894                     	;# 
   228  0895                     	;# 
   229  0895                     	;# 
   230  0895                     	;# 
   231  0896                     	;# 
   232  0896                     	;# 
   233  0896                     	;# 
   234  089B                     	;# 
   235  0911                     	;# 
   236  0912                     	;# 
   237  0913                     	;# 
   238  0914                     	;# 
   239  0915                     	;# 
   240  0916                     	;# 
   241  0918                     	;# 
   242  0919                     	;# 
   243  091A                     	;# 
   244  091B                     	;# 
   245  091C                     	;# 
   246  091D                     	;# 
   247  091E                     	;# 
   248  091F                     	;# 
   249  0E0F                     	;# 
   250  0E10                     	;# 
   251  0E11                     	;# 
   252  0E12                     	;# 
   253  0E13                     	;# 
   254  0E14                     	;# 
   255  0E15                     	;# 
   256  0E18                     	;# 
   257  0E1A                     	;# 
   258  0E1B                     	;# 
   259  0E1C                     	;# 
   260  0E20                     	;# 
   261  0E21                     	;# 
   262  0E22                     	;# 
   263  0E24                     	;# 
   264  0E25                     	;# 
   265  0E28                     	;# 
   266  0E29                     	;# 
   267  0E2A                     	;# 
   268  0E2B                     	;# 
   269  0E90                     	;# 
   270  0E91                     	;# 
   271  0E92                     	;# 
   272  0E94                     	;# 
   273  0E95                     	;# 
   274  0F0F                     	;# 
   275  0F10                     	;# 
   276  0F11                     	;# 
   277  0F12                     	;# 
   278  0F13                     	;# 
   279  0F14                     	;# 
   280  0F15                     	;# 
   281  0F16                     	;# 
   282  0F17                     	;# 
   283  0F18                     	;# 
   284  0F19                     	;# 
   285  0F1A                     	;# 
   286  0F1B                     	;# 
   287  0F1C                     	;# 
   288  0F1D                     	;# 
   289  0F1E                     	;# 
   290  0F1F                     	;# 
   291  0F20                     	;# 
   292  0F21                     	;# 
   293  0F22                     	;# 
   294  0F23                     	;# 
   295  0FE4                     	;# 
   296  0FE5                     	;# 
   297  0FE6                     	;# 
   298  0FE7                     	;# 
   299  0FE8                     	;# 
   300  0FE9                     	;# 
   301  0FEA                     	;# 
   302  0FEB                     	;# 
   303  0FED                     	;# 
   304  0FEE                     	;# 
   305  0FEF                     	;# 
   306  0000                     	;# 
   307  0001                     	;# 
   308  0002                     	;# 
   309  0003                     	;# 
   310  0004                     	;# 
   311  0005                     	;# 
   312  0006                     	;# 
   313  0007                     	;# 
   314  0008                     	;# 
   315  0009                     	;# 
   316  000A                     	;# 
   317  000B                     	;# 
   318  000C                     	;# 
   319  0010                     	;# 
   320  0011                     	;# 
   321  0012                     	;# 
   322  0013                     	;# 
   323  0014                     	;# 
   324  0015                     	;# 
   325  0015                     	;# 
   326  0016                     	;# 
   327  0016                     	;# 
   328  0017                     	;# 
   329  0018                     	;# 
   330  0019                     	;# 
   331  0019                     	;# 
   332  001A                     	;# 
   333  001B                     	;# 
   334  001C                     	;# 
   335  001D                     	;# 
   336  001E                     	;# 
   337  001F                     	;# 
   338  008C                     	;# 
   339  0090                     	;# 
   340  0091                     	;# 
   341  0092                     	;# 
   342  0093                     	;# 
   343  0094                     	;# 
   344  0097                     	;# 
   345  009B                     	;# 
   346  009B                     	;# 
   347  009C                     	;# 
   348  009D                     	;# 
   349  009E                     	;# 
   350  009F                     	;# 
   351  010C                     	;# 
   352  0111                     	;# 
   353  0112                     	;# 
   354  0115                     	;# 
   355  0116                     	;# 
   356  0117                     	;# 
   357  0118                     	;# 
   358  0119                     	;# 
   359  018C                     	;# 
   360  0197                     	;# 
   361  0199                     	;# 
   362  0199                     	;# 
   363  0199                     	;# 
   364  019A                     	;# 
   365  019A                     	;# 
   366  019A                     	;# 
   367  019B                     	;# 
   368  019B                     	;# 
   369  019B                     	;# 
   370  019B                     	;# 
   371  019B                     	;# 
   372  019C                     	;# 
   373  019C                     	;# 
   374  019C                     	;# 
   375  019D                     	;# 
   376  019D                     	;# 
   377  019D                     	;# 
   378  019E                     	;# 
   379  019E                     	;# 
   380  019E                     	;# 
   381  019F                     	;# 
   382  019F                     	;# 
   383  019F                     	;# 
   384  019F                     	;# 
   385  019F                     	;# 
   386  020C                     	;# 
   387  0211                     	;# 
   388  0211                     	;# 
   389  0212                     	;# 
   390  0212                     	;# 
   391  0213                     	;# 
   392  0213                     	;# 
   393  0214                     	;# 
   394  0214                     	;# 
   395  0215                     	;# 
   396  0215                     	;# 
   397  0215                     	;# 
   398  0215                     	;# 
   399  0216                     	;# 
   400  0216                     	;# 
   401  0217                     	;# 
   402  0217                     	;# 
   403  028C                     	;# 
   404  0291                     	;# 
   405  0291                     	;# 
   406  0292                     	;# 
   407  0293                     	;# 
   408  0294                     	;# 
   409  0295                     	;# 
   410  0295                     	;# 
   411  0296                     	;# 
   412  0297                     	;# 
   413  0298                     	;# 
   414  030C                     	;# 
   415  038C                     	;# 
   416  0391                     	;# 
   417  0392                     	;# 
   418  0393                     	;# 
   419  039A                     	;# 
   420  039C                     	;# 
   421  039D                     	;# 
   422  039E                     	;# 
   423  039F                     	;# 
   424  0498                     	;# 
   425  0498                     	;# 
   426  0499                     	;# 
   427  049A                     	;# 
   428  049B                     	;# 
   429  049B                     	;# 
   430  049C                     	;# 
   431  049D                     	;# 
   432  049E                     	;# 
   433  049F                     	;# 
   434  0617                     	;# 
   435  0618                     	;# 
   436  0619                     	;# 
   437  0619                     	;# 
   438  061A                     	;# 
   439  061B                     	;# 
   440  061C                     	;# 
   441  061C                     	;# 
   442  0691                     	;# 
   443  0692                     	;# 
   444  0693                     	;# 
   445  0694                     	;# 
   446  0695                     	;# 
   447  0696                     	;# 
   448  0697                     	;# 
   449  0698                     	;# 
   450  0699                     	;# 
   451  0891                     	;# 
   452  0891                     	;# 
   453  0891                     	;# 
   454  0891                     	;# 
   455  0891                     	;# 
   456  0891                     	;# 
   457  0892                     	;# 
   458  0892                     	;# 
   459  0892                     	;# 
   460  0893                     	;# 
   461  0893                     	;# 
   462  0893                     	;# 
   463  0893                     	;# 
   464  0893                     	;# 
   465  0893                     	;# 
   466  0894                     	;# 
   467  0894                     	;# 
   468  0894                     	;# 
   469  0895                     	;# 
   470  0895                     	;# 
   471  0895                     	;# 
   472  0896                     	;# 
   473  0896                     	;# 
   474  0896                     	;# 
   475  089B                     	;# 
   476  0911                     	;# 
   477  0912                     	;# 
   478  0913                     	;# 
   479  0914                     	;# 
   480  0915                     	;# 
   481  0916                     	;# 
   482  0918                     	;# 
   483  0919                     	;# 
   484  091A                     	;# 
   485  091B                     	;# 
   486  091C                     	;# 
   487  091D                     	;# 
   488  091E                     	;# 
   489  091F                     	;# 
   490  0E0F                     	;# 
   491  0E10                     	;# 
   492  0E11                     	;# 
   493  0E12                     	;# 
   494  0E13                     	;# 
   495  0E14                     	;# 
   496  0E15                     	;# 
   497  0E18                     	;# 
   498  0E1A                     	;# 
   499  0E1B                     	;# 
   500  0E1C                     	;# 
   501  0E20                     	;# 
   502  0E21                     	;# 
   503  0E22                     	;# 
   504  0E24                     	;# 
   505  0E25                     	;# 
   506  0E28                     	;# 
   507  0E29                     	;# 
   508  0E2A                     	;# 
   509  0E2B                     	;# 
   510  0E90                     	;# 
   511  0E91                     	;# 
   512  0E92                     	;# 
   513  0E94                     	;# 
   514  0E95                     	;# 
   515  0F0F                     	;# 
   516  0F10                     	;# 
   517  0F11                     	;# 
   518  0F12                     	;# 
   519  0F13                     	;# 
   520  0F14                     	;# 
   521  0F15                     	;# 
   522  0F16                     	;# 
   523  0F17                     	;# 
   524  0F18                     	;# 
   525  0F19                     	;# 
   526  0F1A                     	;# 
   527  0F1B                     	;# 
   528  0F1C                     	;# 
   529  0F1D                     	;# 
   530  0F1E                     	;# 
   531  0F1F                     	;# 
   532  0F20                     	;# 
   533  0F21                     	;# 
   534  0F22                     	;# 
   535  0F23                     	;# 
   536  0FE4                     	;# 
   537  0FE5                     	;# 
   538  0FE6                     	;# 
   539  0FE7                     	;# 
   540  0FE8                     	;# 
   541  0FE9                     	;# 
   542  0FEA                     	;# 
   543  0FEB                     	;# 
   544  0FED                     	;# 
   545  0FEE                     	;# 
   546  0FEF                     	;# 
   547  0000                     	;# 
   548  0001                     	;# 
   549  0002                     	;# 
   550  0003                     	;# 
   551  0004                     	;# 
   552  0005                     	;# 
   553  0006                     	;# 
   554  0007                     	;# 
   555  0008                     	;# 
   556  0009                     	;# 
   557  000A                     	;# 
   558  000B                     	;# 
   559  000C                     	;# 
   560  0010                     	;# 
   561  0011                     	;# 
   562  0012                     	;# 
   563  0013                     	;# 
   564  0014                     	;# 
   565  0015                     	;# 
   566  0015                     	;# 
   567  0016                     	;# 
   568  0016                     	;# 
   569  0017                     	;# 
   570  0018                     	;# 
   571  0019                     	;# 
   572  0019                     	;# 
   573  001A                     	;# 
   574  001B                     	;# 
   575  001C                     	;# 
   576  001D                     	;# 
   577  001E                     	;# 
   578  001F                     	;# 
   579  008C                     	;# 
   580  0090                     	;# 
   581  0091                     	;# 
   582  0092                     	;# 
   583  0093                     	;# 
   584  0094                     	;# 
   585  0097                     	;# 
   586  009B                     	;# 
   587  009B                     	;# 
   588  009C                     	;# 
   589  009D                     	;# 
   590  009E                     	;# 
   591  009F                     	;# 
   592  010C                     	;# 
   593  0111                     	;# 
   594  0112                     	;# 
   595  0115                     	;# 
   596  0116                     	;# 
   597  0117                     	;# 
   598  0118                     	;# 
   599  0119                     	;# 
   600  018C                     	;# 
   601  0197                     	;# 
   602  0199                     	;# 
   603  0199                     	;# 
   604  0199                     	;# 
   605  019A                     	;# 
   606  019A                     	;# 
   607  019A                     	;# 
   608  019B                     	;# 
   609  019B                     	;# 
   610  019B                     	;# 
   611  019B                     	;# 
   612  019B                     	;# 
   613  019C                     	;# 
   614  019C                     	;# 
   615  019C                     	;# 
   616  019D                     	;# 
   617  019D                     	;# 
   618  019D                     	;# 
   619  019E                     	;# 
   620  019E                     	;# 
   621  019E                     	;# 
   622  019F                     	;# 
   623  019F                     	;# 
   624  019F                     	;# 
   625  019F                     	;# 
   626  019F                     	;# 
   627  020C                     	;# 
   628  0211                     	;# 
   629  0211                     	;# 
   630  0212                     	;# 
   631  0212                     	;# 
   632  0213                     	;# 
   633  0213                     	;# 
   634  0214                     	;# 
   635  0214                     	;# 
   636  0215                     	;# 
   637  0215                     	;# 
   638  0215                     	;# 
   639  0215                     	;# 
   640  0216                     	;# 
   641  0216                     	;# 
   642  0217                     	;# 
   643  0217                     	;# 
   644  028C                     	;# 
   645  0291                     	;# 
   646  0291                     	;# 
   647  0292                     	;# 
   648  0293                     	;# 
   649  0294                     	;# 
   650  0295                     	;# 
   651  0295                     	;# 
   652  0296                     	;# 
   653  0297                     	;# 
   654  0298                     	;# 
   655  030C                     	;# 
   656  038C                     	;# 
   657  0391                     	;# 
   658  0392                     	;# 
   659  0393                     	;# 
   660  039A                     	;# 
   661  039C                     	;# 
   662  039D                     	;# 
   663  039E                     	;# 
   664  039F                     	;# 
   665  0498                     	;# 
   666  0498                     	;# 
   667  0499                     	;# 
   668  049A                     	;# 
   669  049B                     	;# 
   670  049B                     	;# 
   671  049C                     	;# 
   672  049D                     	;# 
   673  049E                     	;# 
   674  049F                     	;# 
   675  0617                     	;# 
   676  0618                     	;# 
   677  0619                     	;# 
   678  0619                     	;# 
   679  061A                     	;# 
   680  061B                     	;# 
   681  061C                     	;# 
   682  061C                     	;# 
   683  0691                     	;# 
   684  0692                     	;# 
   685  0693                     	;# 
   686  0694                     	;# 
   687  0695                     	;# 
   688  0696                     	;# 
   689  0697                     	;# 
   690  0698                     	;# 
   691  0699                     	;# 
   692  0891                     	;# 
   693  0891                     	;# 
   694  0891                     	;# 
   695  0891                     	;# 
   696  0891                     	;# 
   697  0891                     	;# 
   698  0892                     	;# 
   699  0892                     	;# 
   700  0892                     	;# 
   701  0893                     	;# 
   702  0893                     	;# 
   703  0893                     	;# 
   704  0893                     	;# 
   705  0893                     	;# 
   706  0893                     	;# 
   707  0894                     	;# 
   708  0894                     	;# 
   709  0894                     	;# 
   710  0895                     	;# 
   711  0895                     	;# 
   712  0895                     	;# 
   713  0896                     	;# 
   714  0896                     	;# 
   715  0896                     	;# 
   716  089B                     	;# 
   717  0911                     	;# 
   718  0912                     	;# 
   719  0913                     	;# 
   720  0914                     	;# 
   721  0915                     	;# 
   722  0916                     	;# 
   723  0918                     	;# 
   724  0919                     	;# 
   725  091A                     	;# 
   726  091B                     	;# 
   727  091C                     	;# 
   728  091D                     	;# 
   729  091E                     	;# 
   730  091F                     	;# 
   731  0E0F                     	;# 
   732  0E10                     	;# 
   733  0E11                     	;# 
   734  0E12                     	;# 
   735  0E13                     	;# 
   736  0E14                     	;# 
   737  0E15                     	;# 
   738  0E18                     	;# 
   739  0E1A                     	;# 
   740  0E1B                     	;# 
   741  0E1C                     	;# 
   742  0E20                     	;# 
   743  0E21                     	;# 
   744  0E22                     	;# 
   745  0E24                     	;# 
   746  0E25                     	;# 
   747  0E28                     	;# 
   748  0E29                     	;# 
   749  0E2A                     	;# 
   750  0E2B                     	;# 
   751  0E90                     	;# 
   752  0E91                     	;# 
   753  0E92                     	;# 
   754  0E94                     	;# 
   755  0E95                     	;# 
   756  0F0F                     	;# 
   757  0F10                     	;# 
   758  0F11                     	;# 
   759  0F12                     	;# 
   760  0F13                     	;# 
   761  0F14                     	;# 
   762  0F15                     	;# 
   763  0F16                     	;# 
   764  0F17                     	;# 
   765  0F18                     	;# 
   766  0F19                     	;# 
   767  0F1A                     	;# 
   768  0F1B                     	;# 
   769  0F1C                     	;# 
   770  0F1D                     	;# 
   771  0F1E                     	;# 
   772  0F1F                     	;# 
   773  0F20                     	;# 
   774  0F21                     	;# 
   775  0F22                     	;# 
   776  0F23                     	;# 
   777  0FE4                     	;# 
   778  0FE5                     	;# 
   779  0FE6                     	;# 
   780  0FE7                     	;# 
   781  0FE8                     	;# 
   782  0FE9                     	;# 
   783  0FEA                     	;# 
   784  0FEB                     	;# 
   785  0FED                     	;# 
   786  0FEE                     	;# 
   787  0FEF                     	;# 
   788  0000                     	;# 
   789  0001                     	;# 
   790  0002                     	;# 
   791  0003                     	;# 
   792  0004                     	;# 
   793  0005                     	;# 
   794  0006                     	;# 
   795  0007                     	;# 
   796  0008                     	;# 
   797  0009                     	;# 
   798  000A                     	;# 
   799  000B                     	;# 
   800  000C                     	;# 
   801  0010                     	;# 
   802  0011                     	;# 
   803  0012                     	;# 
   804  0013                     	;# 
   805  0014                     	;# 
   806  0015                     	;# 
   807  0015                     	;# 
   808  0016                     	;# 
   809  0016                     	;# 
   810  0017                     	;# 
   811  0018                     	;# 
   812  0019                     	;# 
   813  0019                     	;# 
   814  001A                     	;# 
   815  001B                     	;# 
   816  001C                     	;# 
   817  001D                     	;# 
   818  001E                     	;# 
   819  001F                     	;# 
   820  008C                     	;# 
   821  0090                     	;# 
   822  0091                     	;# 
   823  0092                     	;# 
   824  0093                     	;# 
   825  0094                     	;# 
   826  0097                     	;# 
   827  009B                     	;# 
   828  009B                     	;# 
   829  009C                     	;# 
   830  009D                     	;# 
   831  009E                     	;# 
   832  009F                     	;# 
   833  010C                     	;# 
   834  0111                     	;# 
   835  0112                     	;# 
   836  0115                     	;# 
   837  0116                     	;# 
   838  0117                     	;# 
   839  0118                     	;# 
   840  0119                     	;# 
   841  018C                     	;# 
   842  0197                     	;# 
   843  0199                     	;# 
   844  0199                     	;# 
   845  0199                     	;# 
   846  019A                     	;# 
   847  019A                     	;# 
   848  019A                     	;# 
   849  019B                     	;# 
   850  019B                     	;# 
   851  019B                     	;# 
   852  019B                     	;# 
   853  019B                     	;# 
   854  019C                     	;# 
   855  019C                     	;# 
   856  019C                     	;# 
   857  019D                     	;# 
   858  019D                     	;# 
   859  019D                     	;# 
   860  019E                     	;# 
   861  019E                     	;# 
   862  019E                     	;# 
   863  019F                     	;# 
   864  019F                     	;# 
   865  019F                     	;# 
   866  019F                     	;# 
   867  019F                     	;# 
   868  020C                     	;# 
   869  0211                     	;# 
   870  0211                     	;# 
   871  0212                     	;# 
   872  0212                     	;# 
   873  0213                     	;# 
   874  0213                     	;# 
   875  0214                     	;# 
   876  0214                     	;# 
   877  0215                     	;# 
   878  0215                     	;# 
   879  0215                     	;# 
   880  0215                     	;# 
   881  0216                     	;# 
   882  0216                     	;# 
   883  0217                     	;# 
   884  0217                     	;# 
   885  028C                     	;# 
   886  0291                     	;# 
   887  0291                     	;# 
   888  0292                     	;# 
   889  0293                     	;# 
   890  0294                     	;# 
   891  0295                     	;# 
   892  0295                     	;# 
   893  0296                     	;# 
   894  0297                     	;# 
   895  0298                     	;# 
   896  030C                     	;# 
   897  038C                     	;# 
   898  0391                     	;# 
   899  0392                     	;# 
   900  0393                     	;# 
   901  039A                     	;# 
   902  039C                     	;# 
   903  039D                     	;# 
   904  039E                     	;# 
   905  039F                     	;# 
   906  0498                     	;# 
   907  0498                     	;# 
   908  0499                     	;# 
   909  049A                     	;# 
   910  049B                     	;# 
   911  049B                     	;# 
   912  049C                     	;# 
   913  049D                     	;# 
   914  049E                     	;# 
   915  049F                     	;# 
   916  0617                     	;# 
   917  0618                     	;# 
   918  0619                     	;# 
   919  0619                     	;# 
   920  061A                     	;# 
   921  061B                     	;# 
   922  061C                     	;# 
   923  061C                     	;# 
   924  0691                     	;# 
   925  0692                     	;# 
   926  0693                     	;# 
   927  0694                     	;# 
   928  0695                     	;# 
   929  0696                     	;# 
   930  0697                     	;# 
   931  0698                     	;# 
   932  0699                     	;# 
   933  0891                     	;# 
   934  0891                     	;# 
   935  0891                     	;# 
   936  0891                     	;# 
   937  0891                     	;# 
   938  0891                     	;# 
   939  0892                     	;# 
   940  0892                     	;# 
   941  0892                     	;# 
   942  0893                     	;# 
   943  0893                     	;# 
   944  0893                     	;# 
   945  0893                     	;# 
   946  0893                     	;# 
   947  0893                     	;# 
   948  0894                     	;# 
   949  0894                     	;# 
   950  0894                     	;# 
   951  0895                     	;# 
   952  0895                     	;# 
   953  0895                     	;# 
   954  0896                     	;# 
   955  0896                     	;# 
   956  0896                     	;# 
   957  089B                     	;# 
   958  0911                     	;# 
   959  0912                     	;# 
   960  0913                     	;# 
   961  0914                     	;# 
   962  0915                     	;# 
   963  0916                     	;# 
   964  0918                     	;# 
   965  0919                     	;# 
   966  091A                     	;# 
   967  091B                     	;# 
   968  091C                     	;# 
   969  091D                     	;# 
   970  091E                     	;# 
   971  091F                     	;# 
   972  0E0F                     	;# 
   973  0E10                     	;# 
   974  0E11                     	;# 
   975  0E12                     	;# 
   976  0E13                     	;# 
   977  0E14                     	;# 
   978  0E15                     	;# 
   979  0E18                     	;# 
   980  0E1A                     	;# 
   981  0E1B                     	;# 
   982  0E1C                     	;# 
   983  0E20                     	;# 
   984  0E21                     	;# 
   985  0E22                     	;# 
   986  0E24                     	;# 
   987  0E25                     	;# 
   988  0E28                     	;# 
   989  0E29                     	;# 
   990  0E2A                     	;# 
   991  0E2B                     	;# 
   992  0E90                     	;# 
   993  0E91                     	;# 
   994  0E92                     	;# 
   995  0E94                     	;# 
   996  0E95                     	;# 
   997  0F0F                     	;# 
   998  0F10                     	;# 
   999  0F11                     	;# 
  1000  0F12                     	;# 
  1001  0F13                     	;# 
  1002  0F14                     	;# 
  1003  0F15                     	;# 
  1004  0F16                     	;# 
  1005  0F17                     	;# 
  1006  0F18                     	;# 
  1007  0F19                     	;# 
  1008  0F1A                     	;# 
  1009  0F1B                     	;# 
  1010  0F1C                     	;# 
  1011  0F1D                     	;# 
  1012  0F1E                     	;# 
  1013  0F1F                     	;# 
  1014  0F20                     	;# 
  1015  0F21                     	;# 
  1016  0F22                     	;# 
  1017  0F23                     	;# 
  1018  0FE4                     	;# 
  1019  0FE5                     	;# 
  1020  0FE6                     	;# 
  1021  0FE7                     	;# 
  1022  0FE8                     	;# 
  1023  0FE9                     	;# 
  1024  0FEA                     	;# 
  1025  0FEB                     	;# 
  1026  0FED                     	;# 
  1027  0FEE                     	;# 
  1028  0FEF                     	;# 
  1029                           
  1030                           	psect	idataBANK0
  1031  0249                     __pidataBANK0:	
  1032                           
  1033                           ;initializer for _down_table
  1034  0249  342D               	retlw	45
  1035  024A  3400               	retlw	0
  1036  024B  3433               	retlw	51
  1037  024C  3400               	retlw	0
  1038  024D  3419               	retlw	25
  1039  024E  3400               	retlw	0
  1040  024F  340F               	retlw	15
  1041  0250  3400               	retlw	0
  1042  0251  3405               	retlw	5
  1043  0252  3400               	retlw	0
  1044  0253  3401               	retlw	1
  1045  0254  3400               	retlw	0
  1046                           
  1047                           ;initializer for _Noise_Seed
  1048  0255  3401               	retlw	1
  1049  0256  3400               	retlw	0
  1050  0257  3400               	retlw	0
  1051  0258  3400               	retlw	0
  1052                           
  1053                           ;initializer for _Vo_2_Freq
  1054  0259  3480               	retlw	128
  1055  025A  3401               	retlw	1
  1056                           
  1057                           ;initializer for _Vo_1_Freq
  1058  025B  3400               	retlw	0
  1059  025C  3405               	retlw	5
  1060                           
  1061                           ;initializer for _Train_Speed
  1062  025D  3400               	retlw	0
  1063  025E  3401               	retlw	1
  1064                           
  1065                           ;initializer for _Vo_2_Amp
  1066  025F  34FF               	retlw	255
  1067                           
  1068                           ;initializer for _Vo_1_Amp
  1069  0260  34FF               	retlw	255
  1070                           
  1071                           ;initializer for _App_Tempo
  1072  0261  346C               	retlw	108
  1073                           
  1074                           ;initializer for _MidTick_DivCtr
  1075  0262  3401               	retlw	1
  1076                           
  1077                           	psect	idataBANK1
  1078  0263                     __pidataBANK1:	
  1079                           
  1080                           ;initializer for _up_table
  1081  0263  3402               	retlw	2
  1082  0264  3400               	retlw	0
  1083  0265  3405               	retlw	5
  1084  0266  3400               	retlw	0
  1085  0267  340A               	retlw	10
  1086  0268  3400               	retlw	0
  1087  0269  340F               	retlw	15
  1088  026A  3400               	retlw	0
  1089  026B  3419               	retlw	25
  1090  026C  3400               	retlw	0
  1091  026D  3433               	retlw	51
  1092  026E  3400               	retlw	0
  1093  026F  3425               	retlw	37
  1094  0270  3400               	retlw	0
  1095                           
  1096                           	psect	stringtext
  1097  02A5                     __pstringtext:	
  1098  02A5                     _Vol_margin:	
  1099  02A5  3402               	retlw	2
  1100  02A6                     __end_of_Vol_margin:	
  1101  000B                     _INTCON	set	11
  1102  001F                     _T2CON	set	31
  1103  001D                     _TMR2	set	29
  1104  001E                     _PR2	set	30
  1105  0089                     _TMR2IF	set	137
  1106  009C                     _ADRESH	set	156
  1107  009D                     _ADCON0	set	157
  1108  0091                     _PIE1	set	145
  1109  009E                     _ADCON1	set	158
  1110  008C                     _TRISA	set	140
  1111  010C                     _LATA	set	268
  1112  018C                     _ANSELA	set	396
  1113  0291                     _CCPR1	set	657
  1114  0293                     _CCP1CON	set	659
  1115  091F                     _OSCFRQbits	set	2335
  1116  0E95                     _RA5PPS	set	3733
  1117                           
  1118                           ; #config settings
  1119  0000                     
  1120                           	psect	cinit
  1121  0024                     start_initialization:	
  1122  0024                     __initialization:	
  1123                           
  1124                           ; Initialize objects allocated to BANK0
  1125  0024  3049               	movlw	low __pidataBANK0
  1126  0025  0084               	movwf	4
  1127  0026  3082               	movlw	(high __pidataBANK0)| (0+128)
  1128  0027  0085               	movwf	5
  1129  0028  303F               	movlw	low __pdataBANK0
  1130  0029  0086               	movwf	6
  1131  002A  3000               	movlw	high __pdataBANK0
  1132  002B  0087               	movwf	7
  1133  002C  301A               	movlw	26
  1134  002D  228C               	fcall	init_ram
  1135                           
  1136                           ; Initialize objects allocated to BANK1
  1137  002E  3063               	movlw	low __pidataBANK1
  1138  002F  0084               	movwf	4
  1139  0030  3082               	movlw	(high __pidataBANK1)| (0+128)
  1140  0031  0085               	movwf	5
  1141  0032  30A0               	movlw	low __pdataBANK1
  1142  0033  0086               	movwf	6
  1143  0034  3000               	movlw	high __pdataBANK1
  1144  0035  0087               	movwf	7
  1145  0036  300E               	movlw	14
  1146  0037  228C               	fcall	init_ram
  1147                           
  1148                           ; Clear objects allocated to BANK0
  1149  0038  3020               	movlw	low __pbssBANK0
  1150  0039  0084               	movwf	4
  1151  003A  3000               	movlw	high __pbssBANK0
  1152  003B  0085               	movwf	5
  1153  003C  301F               	movlw	31
  1154  003D  2292               	fcall	clear_ram0
  1155  003E                     end_of_initialization:	
  1156                           ;End of C runtime variable initialization code
  1157                           
  1158  003E                     __end_of__initialization:	
  1159  003E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1160  003F  0020               	movlb	0
  1161  0040  2A71               	ljmp	_main	;jump to C main() function
  1162                           
  1163                           	psect	bssBANK0
  1164  0020                     __pbssBANK0:	
  1165  0020                     _Vo_WT_1:	
  1166  0020                     	ds	8
  1167  0028                     _Vo_2_Phase:	
  1168  0028                     	ds	2
  1169  002A                     _Vo_1_Phase:	
  1170  002A                     	ds	2
  1171  002C                     _Vo_DC:	
  1172  002C                     	ds	2
  1173  002E                     _Train_Acc:	
  1174  002E                     	ds	2
  1175  0030                     _App_Output:	
  1176  0030                     	ds	2
  1177  0032                     _App_Tempo_Phase:	
  1178  0032                     	ds	2
  1179  0034                     _LED_Ctr:	
  1180  0034                     	ds	2
  1181  0036                     _Vo_2_Width:	
  1182  0036                     	ds	1
  1183  0037                     _Vo_1_Width:	
  1184  0037                     	ds	1
  1185  0038                     _Vo:	
  1186  0038                     	ds	1
  1187  0039                     _Train_Up:	
  1188  0039                     	ds	1
  1189  003A                     App_Step@phase:	
  1190  003A                     	ds	1
  1191  003B                     _Vol_1_s:	
  1192  003B                     	ds	1
  1193  003C                     _Vol_1:	
  1194  003C                     	ds	1
  1195  003D                     _App_Noise:	
  1196  003D                     	ds	1
  1197  003E                     _MidTick_Task:	
  1198  003E                     	ds	1
  1199                           
  1200                           	psect	dataBANK0
  1201  003F                     __pdataBANK0:	
  1202  003F                     _down_table:	
  1203  003F                     	ds	12
  1204  004B                     _Noise_Seed:	
  1205  004B                     	ds	4
  1206  004F                     _Vo_2_Freq:	
  1207  004F                     	ds	2
  1208  0051                     _Vo_1_Freq:	
  1209  0051                     	ds	2
  1210  0053                     _Train_Speed:	
  1211  0053                     	ds	2
  1212  0055                     _Vo_2_Amp:	
  1213  0055                     	ds	1
  1214  0056                     _Vo_1_Amp:	
  1215  0056                     	ds	1
  1216  0057                     _App_Tempo:	
  1217  0057                     	ds	1
  1218  0058                     _MidTick_DivCtr:	
  1219  0058                     	ds	1
  1220                           
  1221                           	psect	dataBANK1
  1222  00A0                     __pdataBANK1:	
  1223  00A0                     _up_table:	
  1224  00A0                     	ds	14
  1225                           
  1226                           	psect	inittext
  1227  028C                     init_ram:	
  1228  028C  00FE               	movwf	126
  1229  028D                     initloop:	
  1230  028D  0012               	moviw fsr0++
  1231  028E  001E               	movwi fsr1++
  1232  028F  0BFE               	decfsz	126,f
  1233  0290  2A8D               	goto	initloop
  1234  0291  3400               	retlw	0
  1235                           
  1236                           	psect	clrtext
  1237  0292                     clear_ram0:	
  1238                           ;	Called with FSR0 containing the base address, and
  1239                           ;	WREG with the size to clear
  1240                           
  1241  0292  0064               	clrwdt	;clear the watchdog before getting into this loop
  1242  0293                     clrloop0:	
  1243  0293  0180               	clrf	0	;clear RAM location pointed to by FSR
  1244  0294  3101               	addfsr 0,1
  1245  0295  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1246  0296  2A93               	goto	clrloop0	;have we reached the end yet?
  1247  0297  3400               	retlw	0	;all done for this memory range, return
  1248                           
  1249                           	psect	cstackCOMMON
  1250  0070                     __pcstackCOMMON:	
  1251  0070                     ?_App_Init:	
  1252  0070                     ?_Chip_Init:	
  1253                           ; 1 bytes @ 0x0
  1254                           
  1255  0070                     ?_MidTick_Step:	
  1256                           ; 1 bytes @ 0x0
  1257                           
  1258  0070                     ?_App_Step:	
  1259                           ; 1 bytes @ 0x0
  1260                           
  1261  0070                     ?_Noise_Step:	
  1262                           ; 1 bytes @ 0x0
  1263                           
  1264  0070                     ?_ADC_Go:	
  1265                           ; 1 bytes @ 0x0
  1266                           
  1267  0070                     ?_ADC_Res:	
  1268                           ; 1 bytes @ 0x0
  1269                           
  1270  0070                     ?_Vol_1_Change:	
  1271                           ; 1 bytes @ 0x0
  1272                           
  1273  0070                     ?_Train_Step:	
  1274                           ; 1 bytes @ 0x0
  1275                           
  1276  0070                     ?_main:	
  1277                           ; 1 bytes @ 0x0
  1278                           
  1279  0070                     ?_ISR:	
  1280                           ; 1 bytes @ 0x0
  1281                           
  1282  0070                     ?_Voix_int_Step:	
  1283                           ; 1 bytes @ 0x0
  1284                           
  1285                           
  1286                           ; 2 bytes @ 0x0
  1287  0070                     	ds	2
  1288  0072                     ??_Voix_int_Step:	
  1289                           
  1290                           ; 1 bytes @ 0x2
  1291  0072                     	ds	4
  1292  0076                     _Voix_int_Step$164:	
  1293                           
  1294                           ; 2 bytes @ 0x6
  1295  0076                     	ds	2
  1296  0078                     _Voix_int_Step$165:	
  1297                           
  1298                           ; 2 bytes @ 0x8
  1299  0078                     	ds	2
  1300  007A                     Voix_int_Step@acc:	
  1301                           
  1302                           ; 2 bytes @ 0xA
  1303  007A                     	ds	2
  1304  007C                     ??_ISR:	
  1305                           
  1306                           ; 1 bytes @ 0xC
  1307  007C                     	ds	2
  1308                           
  1309                           	psect	cstackBANK0
  1310  0059                     __pcstackBANK0:	
  1311  0059                     ??_Chip_Init:	
  1312  0059                     ?_Voix_Set_Speed:	
  1313                           ; 1 bytes @ 0x0
  1314                           
  1315  0059                     ??_Noise_Step:	
  1316                           ; 1 bytes @ 0x0
  1317                           
  1318  0059                     ??_ADC_Go:	
  1319                           ; 1 bytes @ 0x0
  1320                           
  1321  0059                     ??_ADC_Res:	
  1322                           ; 1 bytes @ 0x0
  1323                           
  1324  0059                     ?_Train_Set_Acc:	
  1325                           ; 1 bytes @ 0x0
  1326                           
  1327  0059                     Train_Set_Acc@acc:	
  1328                           ; 1 bytes @ 0x0
  1329                           
  1330  0059                     Voix_Set_Speed@speed:	
  1331                           ; 2 bytes @ 0x0
  1332                           
  1333                           
  1334                           ; 2 bytes @ 0x0
  1335  0059                     	ds	1
  1336  005A                     Noise_Step@bits:	
  1337                           
  1338                           ; 1 bytes @ 0x1
  1339  005A                     	ds	1
  1340  005B                     ??_Voix_Set_Speed:	
  1341  005B                     Train_Set_Acc@up:	
  1342                           ; 1 bytes @ 0x2
  1343                           
  1344  005B                     Noise_Step@a:	
  1345                           ; 1 bytes @ 0x2
  1346                           
  1347                           
  1348                           ; 1 bytes @ 0x2
  1349  005B                     	ds	1
  1350  005C                     ??_Train_Set_Acc:	
  1351  005C                     Noise_Step@b:	
  1352                           ; 1 bytes @ 0x3
  1353                           
  1354                           
  1355                           ; 1 bytes @ 0x3
  1356  005C                     	ds	1
  1357  005D                     ??_Vol_1_Change:	
  1358                           
  1359                           ; 1 bytes @ 0x4
  1360  005D                     	ds	2
  1361  005F                     Vol_1_Change@s:	
  1362  005F                     Voix_Set_Speed@bias:	
  1363                           ; 1 bytes @ 0x6
  1364                           
  1365                           
  1366                           ; 2 bytes @ 0x6
  1367  005F                     	ds	2
  1368  0061                     Voix_Set_Speed@power:	
  1369                           
  1370                           ; 2 bytes @ 0x8
  1371  0061                     	ds	2
  1372  0063                     ??_App_Init:	
  1373  0063                     ??_Train_Step:	
  1374                           ; 1 bytes @ 0xA
  1375                           
  1376                           
  1377                           ; 1 bytes @ 0xA
  1378  0063                     	ds	4
  1379  0067                     Train_Step@s:	
  1380                           
  1381                           ; 2 bytes @ 0xE
  1382  0067                     	ds	2
  1383  0069                     ??_App_Step:	
  1384                           
  1385                           ; 1 bytes @ 0x10
  1386  0069                     	ds	4
  1387  006D                     App_Step@vol:	
  1388                           
  1389                           ; 1 bytes @ 0x14
  1390  006D                     	ds	1
  1391  006E                     ??_MidTick_Step:	
  1392  006E                     ??_main:	
  1393                           ; 1 bytes @ 0x15
  1394                           
  1395                           
  1396                           	psect	maintext
  1397  0271                     __pmaintext:	
  1398                           ; 1 bytes @ 0x15
  1399 ;;
  1400 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1401 ;;
  1402 ;; *************** function _main *****************
  1403 ;; Defined at:
  1404 ;;		line 13 in file "C:\17\D\GitHub\17\PIC\1\16F18 VVVF - 01\Main.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;		None
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;		None
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  1    wreg      void 
  1411 ;; Registers used:
  1412 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1413 ;; Tracked objects:
  1414 ;;		On entry : B1F/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1418 ;;      Params:         0       0       0       0
  1419 ;;      Locals:         0       0       0       0
  1420 ;;      Temps:          0       0       0       0
  1421 ;;      Totals:         0       0       0       0
  1422 ;;Total ram usage:        0 bytes
  1423 ;; Hardware stack levels required when called:    6
  1424 ;; This function calls:
  1425 ;;		_App_Init
  1426 ;;		_Chip_Init
  1427 ;;		_MidTick_Step
  1428 ;; This function is called by:
  1429 ;;		Startup code after reset
  1430 ;; This function uses a non-reentrant model
  1431 ;;
  1432                           
  1433                           
  1434                           ;psect for function _main
  1435  0271                     _main:	
  1436                           
  1437                           ;Main.c: 15: App_Init();
  1438                           
  1439                           ;incstack = 0
  1440                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1441  0271  2298               	fcall	_App_Init
  1442                           
  1443                           ;Main.c: 16: Chip_Init();
  1444  0272  2223               	fcall	_Chip_Init
  1445  0273                     l1043:	
  1446                           ;Main.c: 19: while( 1 )
  1447                           
  1448                           
  1449                           ;Main.c: 20: {
  1450                           ;Main.c: 21: if( MidTick_Task )
  1451  0273  0020               	movlb	0	; select bank0
  1452  0274  083E               	movf	_MidTick_Task,w
  1453  0275  1903               	btfsc	3,2
  1454  0276  2A73               	goto	l1043
  1455                           
  1456                           ;Main.c: 22: {
  1457                           ;Main.c: 23: MidTick_Task --;
  1458  0277  3001               	movlw	1
  1459  0278  02BE               	subwf	_MidTick_Task,f
  1460                           
  1461                           ;Main.c: 24: MidTick_Step();
  1462  0279  2285               	fcall	_MidTick_Step
  1463  027A  2A73               	goto	l1043
  1464  027B                     __end_of_main:	
  1465                           
  1466                           	psect	text1
  1467  0285                     __ptext1:	
  1468 ;; *************** function _MidTick_Step *****************
  1469 ;; Defined at:
  1470 ;;		line 31 in file "C:\17\D\GitHub\17\PIC\1\16F18 VVVF - 01\Main.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;		None
  1473 ;; Auto vars:     Size  Location     Type
  1474 ;;		None
  1475 ;; Return value:  Size  Location     Type
  1476 ;;                  1    wreg      void 
  1477 ;; Registers used:
  1478 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1479 ;; Tracked objects:
  1480 ;;		On entry : 0/0
  1481 ;;		On exit  : 0/0
  1482 ;;		Unchanged: 0/0
  1483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1484 ;;      Params:         0       0       0       0
  1485 ;;      Locals:         0       0       0       0
  1486 ;;      Temps:          0       0       0       0
  1487 ;;      Totals:         0       0       0       0
  1488 ;;Total ram usage:        0 bytes
  1489 ;; Hardware stack levels used:    1
  1490 ;; Hardware stack levels required when called:    5
  1491 ;; This function calls:
  1492 ;;		_App_Step
  1493 ;; This function is called by:
  1494 ;;		_main
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498                           
  1499                           ;psect for function _MidTick_Step
  1500  0285                     _MidTick_Step:	
  1501                           
  1502                           ;Main.c: 33: LED_Ctr += 33;
  1503                           
  1504                           ;incstack = 0
  1505                           ; Regs used in _MidTick_Step: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1506  0285  3021               	movlw	33
  1507  0286  0020               	movlb	0	; select bank0
  1508  0287  07B4               	addwf	_LED_Ctr,f
  1509  0288  3000               	movlw	0
  1510  0289  3DB5               	addwfc	_LED_Ctr+1,f
  1511                           
  1512                           ;Main.c: 36: App_Step();
  1513  028A  20CE               	fcall	_App_Step
  1514  028B  0008               	return
  1515  028C                     __end_of_MidTick_Step:	
  1516                           
  1517                           	psect	text2
  1518  00CE                     __ptext2:	
  1519 ;; *************** function _App_Step *****************
  1520 ;; Defined at:
  1521 ;;		line 27 in file "C:\17\D\GitHub\17\PIC\1\16F18 VVVF - 01\App.c"
  1522 ;; Parameters:    Size  Location     Type
  1523 ;;		None
  1524 ;; Auto vars:     Size  Location     Type
  1525 ;;  vol             1   20[BANK0 ] unsigned char 
  1526 ;; Return value:  Size  Location     Type
  1527 ;;                  1    wreg      void 
  1528 ;; Registers used:
  1529 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1530 ;; Tracked objects:
  1531 ;;		On entry : 0/0
  1532 ;;		On exit  : 0/0
  1533 ;;		Unchanged: 0/0
  1534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1535 ;;      Params:         0       0       0       0
  1536 ;;      Locals:         0       1       0       0
  1537 ;;      Temps:          0       4       0       0
  1538 ;;      Totals:         0       5       0       0
  1539 ;;Total ram usage:        5 bytes
  1540 ;; Hardware stack levels used:    1
  1541 ;; Hardware stack levels required when called:    4
  1542 ;; This function calls:
  1543 ;;		_ADC_Go
  1544 ;;		_ADC_Res
  1545 ;;		_Noise_Step
  1546 ;;		_Train_Step
  1547 ;;		_Vol_1_Change
  1548 ;; This function is called by:
  1549 ;;		_MidTick_Step
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           
  1554                           ;psect for function _App_Step
  1555  00CE                     _App_Step:	
  1556                           
  1557                           ;App.c: 29: static uint8 phase = 0;
  1558                           ;App.c: 31: App_Noise = Noise_Step( 4 ) & 0xFF;
  1559                           
  1560                           ;incstack = 0
  1561                           ; Regs used in _App_Step: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1562  00CE  3004               	movlw	4
  1563  00CF  21F6               	fcall	_Noise_Step
  1564  00D0  0020               	movlb	0	; select bank0
  1565  00D1  00E9               	movwf	??_App_Step
  1566  00D2  0869               	movf	??_App_Step,w
  1567  00D3  00BD               	movwf	_App_Noise
  1568                           
  1569                           ;App.c: 32: App_Tempo_Phase += App_Tempo;
  1570  00D4  0857               	movf	_App_Tempo,w
  1571  00D5  00E9               	movwf	??_App_Step
  1572  00D6  01EA               	clrf	??_App_Step+1
  1573  00D7  0869               	movf	??_App_Step,w
  1574  00D8  07B2               	addwf	_App_Tempo_Phase,f
  1575  00D9  086A               	movf	??_App_Step+1,w
  1576  00DA  3DB3               	addwfc	_App_Tempo_Phase+1,f
  1577                           
  1578                           ;App.c: 34: if( App_Tempo_Phase >= 2500 )
  1579  00DB  3009               	movlw	9
  1580  00DC  0233               	subwf	_App_Tempo_Phase+1,w
  1581  00DD  30C4               	movlw	196
  1582  00DE  1903               	skipnz
  1583  00DF  0232               	subwf	_App_Tempo_Phase,w
  1584  00E0  1C03               	skipc
  1585  00E1  2920               	goto	l987
  1586                           
  1587                           ;App.c: 35: {
  1588                           ;App.c: 36: App_Tempo_Phase -= 2500;
  1589  00E2  30C4               	movlw	196
  1590  00E3  02B2               	subwf	_App_Tempo_Phase,f
  1591  00E4  3009               	movlw	9
  1592  00E5  3BB3               	subwfb	_App_Tempo_Phase+1,f
  1593                           
  1594                           ;App.c: 37: }
  1595                           ;App.c: 39: uint8 vol;
  1596                           ;App.c: 40: switch( phase ++ )
  1597  00E6  2920               	goto	l987
  1598  00E7                     l965:	
  1599                           ;App.c: 41: {
  1600                           ;App.c: 42: case 0:
  1601                           
  1602                           
  1603                           ;App.c: 43: ADC_Go();
  1604  00E7  229E               	fcall	_ADC_Go
  1605                           
  1606                           ;App.c: 44: break;
  1607  00E8  0008               	return
  1608  00E9                     l967:	
  1609                           ;App.c: 46: case 1:
  1610                           
  1611                           
  1612                           ;App.c: 47: vol = ADC_Res();
  1613  00E9  22A2               	fcall	_ADC_Res
  1614  00EA  0020               	movlb	0	; select bank0
  1615  00EB  00E9               	movwf	??_App_Step
  1616  00EC  0869               	movf	??_App_Step,w
  1617  00ED  00ED               	movwf	App_Step@vol
  1618                           
  1619                           ;App.c: 48: if( vol > ( Vol_1 + Vol_margin ) )
  1620  00EE  30A5               	movlw	low (_Vol_margin| (0+32768))
  1621  00EF  0084               	movwf	4
  1622  00F0  3082               	movlw	high (_Vol_margin| (0+32768))
  1623  00F1  0085               	movwf	5
  1624  00F2  0800               	movf	0,w	;code access
  1625  00F3  00E9               	movwf	??_App_Step
  1626  00F4  083C               	movf	_Vol_1,w
  1627  00F5  0769               	addwf	??_App_Step,w
  1628  00F6  00EA               	movwf	??_App_Step+1
  1629  00F7  01EB               	clrf	??_App_Step+2
  1630  00F8  0DEB               	rlf	??_App_Step+2,f
  1631  00F9  086B               	movf	??_App_Step+2,w
  1632  00FA  3A80               	xorlw	128
  1633  00FB  00EC               	movwf	??_App_Step+3
  1634  00FC  3080               	movlw	128
  1635  00FD  026C               	subwf	??_App_Step+3,w
  1636  00FE  1D03               	skipz
  1637  00FF  2902               	goto	u695
  1638  0100  086D               	movf	App_Step@vol,w
  1639  0101  026A               	subwf	??_App_Step+1,w
  1640  0102                     u695:	
  1641  0102  1803               	skipnc
  1642  0103  2911               	goto	l975
  1643                           
  1644                           ;App.c: 49: {
  1645                           ;App.c: 50: Vol_1 = vol - Vol_margin;
  1646  0104  30A5               	movlw	low (_Vol_margin| (0+32768))
  1647  0105  0084               	movwf	4
  1648  0106  3082               	movlw	high (_Vol_margin| (0+32768))
  1649  0107  0085               	movwf	5
  1650  0108  0800               	movf	0,w	;code access
  1651  0109  3AFF               	xorlw	255
  1652  010A  3E01               	addlw	1
  1653  010B  0020               	movlb	0	; select bank0
  1654  010C  076D               	addwf	App_Step@vol,w
  1655  010D  00E9               	movwf	??_App_Step
  1656  010E  0869               	movf	??_App_Step,w
  1657  010F  00BC               	movwf	_Vol_1
  1658                           
  1659                           ;App.c: 51: Vol_1_Change();
  1660  0110  21BD               	fcall	_Vol_1_Change
  1661  0111                     l975:	
  1662                           
  1663                           ;App.c: 52: }
  1664                           ;App.c: 53: if( vol < Vol_1 )
  1665  0111  0020               	movlb	0	; select bank0
  1666  0112  083C               	movf	_Vol_1,w
  1667  0113  026D               	subwf	App_Step@vol,w
  1668  0114  1803               	skipnc
  1669  0115  291B               	goto	l981
  1670                           
  1671                           ;App.c: 54: {
  1672                           ;App.c: 55: Vol_1 = vol;
  1673  0116  086D               	movf	App_Step@vol,w
  1674  0117  00E9               	movwf	??_App_Step
  1675  0118  0869               	movf	??_App_Step,w
  1676  0119  00BC               	movwf	_Vol_1
  1677                           
  1678                           ;App.c: 56: Vol_1_Change();
  1679  011A  21BD               	fcall	_Vol_1_Change
  1680  011B                     l981:	
  1681                           
  1682                           ;App.c: 57: }
  1683                           ;App.c: 58: Train_Step();
  1684  011B  2181               	fcall	_Train_Step
  1685                           
  1686                           ;App.c: 59: break;
  1687  011C  0008               	return
  1688  011D                     l983:	
  1689                           ;App.c: 61: case 19:
  1690                           
  1691                           
  1692                           ;App.c: 62: phase = 0;
  1693  011D  0020               	movlb	0	; select bank0
  1694  011E  01BA               	clrf	App_Step@phase
  1695                           
  1696                           ;App.c: 64: }
  1697                           
  1698                           ;App.c: 63: break;
  1699  011F  0008               	return
  1700  0120                     l987:	
  1701  0120  083A               	movf	App_Step@phase,w
  1702  0121  0ABA               	incf	App_Step@phase,f
  1703                           
  1704                           ; Switch size 1, requested type "space"
  1705                           ; Number of cases is 3, Range of values is 0 to 19
  1706                           ; switch strategies available:
  1707                           ; Name         Instructions Cycles
  1708                           ; simple_byte           10     6 (average)
  1709                           ; direct_byte           46     6 (fixed)
  1710                           ; jumptable            260     6 (fixed)
  1711                           ;	Chosen strategy is simple_byte
  1712  0122  3A00               	xorlw	0	; case 0
  1713  0123  1903               	skipnz
  1714  0124  28E7               	goto	l965
  1715  0125  3A01               	xorlw	1	; case 1
  1716  0126  1903               	skipnz
  1717  0127  28E9               	goto	l967
  1718  0128  3A12               	xorlw	18	; case 19
  1719  0129  1903               	skipnz
  1720  012A  291D               	goto	l983
  1721  012B  292C               	goto	l79
  1722  012C                     l79:	
  1723  012C  0008               	return
  1724  012D                     __end_of_App_Step:	
  1725                           
  1726                           	psect	text3
  1727  01BD                     __ptext3:	
  1728 ;; *************** function _Vol_1_Change *****************
  1729 ;; Defined at:
  1730 ;;		line 88 in file "C:\17\D\GitHub\17\PIC\1\16F18 VVVF - 01\App.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;		None
  1733 ;; Auto vars:     Size  Location     Type
  1734 ;;  s               1    6[BANK0 ] unsigned char 
  1735 ;; Return value:  Size  Location     Type
  1736 ;;                  1    wreg      void 
  1737 ;; Registers used:
  1738 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1744 ;;      Params:         0       0       0       0
  1745 ;;      Locals:         0       1       0       0
  1746 ;;      Temps:          0       2       0       0
  1747 ;;      Totals:         0       3       0       0
  1748 ;;Total ram usage:        3 bytes
  1749 ;; Hardware stack levels used:    1
  1750 ;; Hardware stack levels required when called:    3
  1751 ;; This function calls:
  1752 ;;		_Train_Set_Acc
  1753 ;; This function is called by:
  1754 ;;		_App_Step
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           
  1759                           ;psect for function _Vol_1_Change
  1760  01BD                     _Vol_1_Change:	
  1761                           
  1762                           ;App.c: 90: uint8 s = Vol_1 >> 4;
  1763                           
  1764                           ;incstack = 0
  1765                           ; Regs used in _Vol_1_Change: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1766  01BD  0020               	movlb	0	; select bank0
  1767  01BE  083C               	movf	_Vol_1,w
  1768  01BF  00DD               	movwf	??_Vol_1_Change
  1769  01C0  3004               	movlw	4
  1770  01C1                     u605:	
  1771  01C1  36DD               	lsrf	??_Vol_1_Change,f
  1772  01C2  0B89               	decfsz	9,f
  1773  01C3  29C1               	goto	u605
  1774  01C4  085D               	movf	??_Vol_1_Change,w
  1775  01C5  00DE               	movwf	??_Vol_1_Change+1
  1776  01C6  085E               	movf	??_Vol_1_Change+1,w
  1777  01C7  00DF               	movwf	Vol_1_Change@s
  1778                           
  1779                           ;App.c: 91: if( s == Vol_1_s ) return;
  1780  01C8  085F               	movf	Vol_1_Change@s,w
  1781  01C9  063B               	xorwf	_Vol_1_s,w
  1782  01CA  1903               	btfsc	3,2
  1783  01CB  0008               	return
  1784                           
  1785                           ;App.c: 92: Vol_1_s = s;
  1786  01CC  085F               	movf	Vol_1_Change@s,w
  1787  01CD  00DD               	movwf	??_Vol_1_Change
  1788  01CE  085D               	movf	??_Vol_1_Change,w
  1789  01CF  00BB               	movwf	_Vol_1_s
  1790                           
  1791                           ;App.c: 94: if( s > 8 )
  1792  01D0  3009               	movlw	9
  1793  01D1  025F               	subwf	Vol_1_Change@s,w
  1794  01D2  1C03               	skipc
  1795  01D3  29E1               	goto	l931
  1796                           
  1797                           ;App.c: 95: {
  1798                           ;App.c: 96: Train_Set_Acc( up_table[ s - 9 ], 1 );
  1799  01D4  355F               	lslf	Vol_1_Change@s,w
  1800  01D5  3EEE               	addlw	238
  1801  01D6  3EA0               	addlw	(low (_up_table| 0))& (0+255)
  1802  01D7  0086               	movwf	6
  1803  01D8  0187               	clrf	7
  1804  01D9  3F40               	moviw [0]fsr1
  1805  01DA  00D9               	movwf	Train_Set_Acc@acc
  1806  01DB  3F41               	moviw [1]fsr1
  1807  01DC  00DA               	movwf	Train_Set_Acc@acc+1
  1808  01DD  01DB               	clrf	Train_Set_Acc@up
  1809  01DE  0ADB               	incf	Train_Set_Acc@up,f
  1810  01DF  227B               	fcall	_Train_Set_Acc
  1811                           
  1812                           ;App.c: 97: }
  1813  01E0  0008               	return
  1814  01E1                     l931:	
  1815                           
  1816                           ;App.c: 98: else if( s < 2 )
  1817  01E1  3002               	movlw	2
  1818  01E2  0020               	movlb	0	; select bank0
  1819  01E3  025F               	subwf	Vol_1_Change@s,w
  1820  01E4  1C03               	btfss	3,0
  1821  01E5  0008               	return
  1822                           
  1823                           ;App.c: 101: else if( s < 8 )
  1824                           
  1825                           ;App.c: 99: {
  1826                           ;App.c: 100: }
  1827  01E6  3008               	movlw	8
  1828  01E7  025F               	subwf	Vol_1_Change@s,w
  1829  01E8  1803               	skipnc
  1830  01E9  0008               	return
  1831                           
  1832                           ;App.c: 102: {
  1833                           ;App.c: 103: Train_Set_Acc( down_table[ s - 2 ], 0 );
  1834  01EA  355F               	lslf	Vol_1_Change@s,w
  1835  01EB  3EFC               	addlw	252
  1836  01EC  3E3F               	addlw	(low (_down_table| 0))& (0+255)
  1837  01ED  0086               	movwf	6
  1838  01EE  0187               	clrf	7
  1839  01EF  3F40               	moviw [0]fsr1
  1840  01F0  00D9               	movwf	Train_Set_Acc@acc
  1841  01F1  3F41               	moviw [1]fsr1
  1842  01F2  00DA               	movwf	Train_Set_Acc@acc+1
  1843  01F3  01DB               	clrf	Train_Set_Acc@up
  1844  01F4  227B               	fcall	_Train_Set_Acc
  1845  01F5  0008               	return
  1846  01F6                     __end_of_Vol_1_Change:	
  1847                           
  1848                           	psect	text4
  1849  027B                     __ptext4:	
  1850 ;; *************** function _Train_Set_Acc *****************
  1851 ;; Defined at:
  1852 ;;		line 114 in file "C:\17\D\GitHub\17\PIC\1\16F18 VVVF - 01\App.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;  acc             2    0[BANK0 ] unsigned short 
  1855 ;;  up              1    2[BANK0 ] unsigned char 
  1856 ;; Auto vars:     Size  Location     Type
  1857 ;;		None
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  1    wreg      void 
  1860 ;; Registers used:
  1861 ;;		wreg
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1867 ;;      Params:         0       3       0       0
  1868 ;;      Locals:         0       0       0       0
  1869 ;;      Temps:          0       1       0       0
  1870 ;;      Totals:         0       4       0       0
  1871 ;;Total ram usage:        4 bytes
  1872 ;; Hardware stack levels used:    1
  1873 ;; Hardware stack levels required when called:    2
  1874 ;; This function calls:
  1875 ;;		Nothing
  1876 ;; This function is called by:
  1877 ;;		_Vol_1_Change
  1878 ;; This function uses a non-reentrant model
  1879 ;;
  1880                           
  1881                           
  1882                           ;psect for function _Train_Set_Acc
  1883  027B                     _Train_Set_Acc:	
  1884                           
  1885                           ;App.c: 116: Train_Acc = acc;
  1886                           
  1887                           ;incstack = 0
  1888                           ; Regs used in _Train_Set_Acc: [wreg]
  1889  027B  0020               	movlb	0	; select bank0
  1890  027C  085A               	movf	Train_Set_Acc@acc+1,w
  1891  027D  00AF               	movwf	_Train_Acc+1
  1892  027E  0859               	movf	Train_Set_Acc@acc,w
  1893  027F  00AE               	movwf	_Train_Acc
  1894                           
  1895                           ;App.c: 117: Train_Up = up;
  1896  0280  085B               	movf	Train_Set_Acc@up,w
  1897  0281  00DC               	movwf	??_Train_Set_Acc
  1898  0282  085C               	movf	??_Train_Set_Acc,w
  1899  0283  00B9               	movwf	_Train_Up
  1900  0284  0008               	return
  1901  0285                     __end_of_Train_Set_Acc:	
  1902                           
  1903                           	psect	text5
  1904  0181                     __ptext5:	
  1905 ;; *************** function _Train_Step *****************
  1906 ;; Defined at:
  1907 ;;		line 120 in file "C:\17\D\GitHub\17\PIC\1\16F18 VVVF - 01\App.c"
  1908 ;; Parameters:    Size  Location     Type
  1909 ;;		None
  1910 ;; Auto vars:     Size  Location     Type
  1911 ;;  s               2   14[BANK0 ] unsigned short 
  1912 ;; Return value:  Size  Location     Type
  1913 ;;                  1    wreg      void 
  1914 ;; Registers used:
  1915 ;;		wreg, status,2, status,0, pclath, cstack
  1916 ;; Tracked objects:
  1917 ;;		On entry : 0/0
  1918 ;;		On exit  : 0/0
  1919 ;;		Unchanged: 0/0
  1920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1921 ;;      Params:         0       0       0       0
  1922 ;;      Locals:         0       2       0       0
  1923 ;;      Temps:          0       4       0       0
  1924 ;;      Totals:         0       6       0       0
  1925 ;;Total ram usage:        6 bytes
  1926 ;; Hardware stack levels used:    1
  1927 ;; Hardware stack levels required when called:    3
  1928 ;; This function calls:
  1929 ;;		_Voix_Set_Speed
  1930 ;; This function is called by:
  1931 ;;		_App_Step
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935                           
  1936                           ;psect for function _Train_Step
  1937  0181                     _Train_Step:	
  1938                           
  1939                           ;App.c: 122: uint16 s = Train_Speed;
  1940                           
  1941                           ;incstack = 0
  1942                           ; Regs used in _Train_Step: [wreg+status,2+status,0+pclath+cstack]
  1943  0181  0020               	movlb	0	; select bank0
  1944  0182  0854               	movf	_Train_Speed+1,w
  1945  0183  00E8               	movwf	Train_Step@s+1
  1946  0184  0853               	movf	_Train_Speed,w
  1947  0185  00E7               	movwf	Train_Step@s
  1948                           
  1949                           ;App.c: 124: if( Train_Up )
  1950  0186  0839               	movf	_Train_Up,w
  1951  0187  1903               	btfsc	3,2
  1952  0188  29A8               	goto	l949
  1953                           
  1954                           ;App.c: 125: {
  1955                           ;App.c: 126: if( Train_Speed < ( 0xFFFF - Train_Acc ) ) Train_Speed += Train_Acc;
  1956  0189  092E               	comf	_Train_Acc,w
  1957  018A  00E3               	movwf	??_Train_Step
  1958  018B  092F               	comf	_Train_Acc+1,w
  1959  018C  00E4               	movwf	??_Train_Step+1
  1960  018D  0AE3               	incf	??_Train_Step,f
  1961  018E  1903               	skipnz
  1962  018F  0AE4               	incf	??_Train_Step+1,f
  1963  0190  0863               	movf	??_Train_Step,w
  1964  0191  3EFF               	addlw	255
  1965  0192  00E5               	movwf	??_Train_Step+2
  1966  0193  30FF               	movlw	255
  1967  0194  3D64               	addwfc	??_Train_Step+1,w
  1968  0195  00E6               	movwf	??_Train_Step+3
  1969  0196  0866               	movf	??_Train_Step+3,w
  1970  0197  0254               	subwf	_Train_Speed+1,w
  1971  0198  1D03               	skipz
  1972  0199  299C               	goto	u665
  1973  019A  0865               	movf	??_Train_Step+2,w
  1974  019B  0253               	subwf	_Train_Speed,w
  1975  019C                     u665:	
  1976  019C  1803               	skipnc
  1977  019D  29A3               	goto	l947
  1978  019E  082E               	movf	_Train_Acc,w
  1979  019F  07D3               	addwf	_Train_Speed,f
  1980  01A0  082F               	movf	_Train_Acc+1,w
  1981  01A1  3DD4               	addwfc	_Train_Speed+1,f
  1982  01A2  29B7               	goto	l955
  1983  01A3                     l947:	
  1984                           
  1985                           ;App.c: 127: else Train_Speed = 0xFFFF;
  1986  01A3  30FF               	movlw	255
  1987  01A4  00D3               	movwf	_Train_Speed
  1988  01A5  30FF               	movlw	255
  1989  01A6  00D4               	movwf	_Train_Speed+1
  1990                           
  1991                           ;App.c: 128: }
  1992  01A7  29B7               	goto	l955
  1993  01A8                     l949:	
  1994                           
  1995                           ;App.c: 129: else
  1996                           ;App.c: 130: {
  1997                           ;App.c: 131: if( Train_Speed > Train_Acc ) Train_Speed -= Train_Acc;
  1998  01A8  0854               	movf	_Train_Speed+1,w
  1999  01A9  022F               	subwf	_Train_Acc+1,w
  2000  01AA  1D03               	skipz
  2001  01AB  29AE               	goto	u675
  2002  01AC  0853               	movf	_Train_Speed,w
  2003  01AD  022E               	subwf	_Train_Acc,w
  2004  01AE                     u675:	
  2005  01AE  1803               	skipnc
  2006  01AF  29B5               	goto	l953
  2007  01B0  082E               	movf	_Train_Acc,w
  2008  01B1  02D3               	subwf	_Train_Speed,f
  2009  01B2  082F               	movf	_Train_Acc+1,w
  2010  01B3  3BD4               	subwfb	_Train_Speed+1,f
  2011  01B4  29B7               	goto	l955
  2012  01B5                     l953:	
  2013                           
  2014                           ;App.c: 132: else Train_Speed = 0;
  2015  01B5  01D3               	clrf	_Train_Speed
  2016  01B6  01D4               	clrf	_Train_Speed+1
  2017  01B7                     l955:	
  2018                           
  2019                           ;App.c: 133: }
  2020                           ;App.c: 135: Voix_Set_Speed( Train_Speed );
  2021  01B7  0854               	movf	_Train_Speed+1,w
  2022  01B8  00DA               	movwf	Voix_Set_Speed@speed+1
  2023  01B9  0853               	movf	_Train_Speed,w
  2024  01BA  00D9               	movwf	Voix_Set_Speed@speed
  2025  01BB  2041               	fcall	_Voix_Set_Speed
  2026  01BC  0008               	return
  2027  01BD                     __end_of_Train_Step:	
  2028                           
  2029                           	psect	text6
  2030  01F6                     __ptext6:	
  2031 ;; *************** function _Noise_Step *****************
  2032 ;; Defined at:
  2033 ;;		line 6 in file "C:\17\D\GitHub\17\PIC\1\16F18 VVVF - 01\Voix.c"
  2034 ;; Parameters:    Size  Location     Type
  2035 ;;  bits            1    wreg     unsigned char 
  2036 ;; Auto vars:     Size  Location     Type
  2037 ;;  bits            1    1[BANK0 ] unsigned char 
  2038 ;;  b               1    3[BANK0 ] unsigned char 
  2039 ;;  a               1    2[BANK0 ] unsigned char 
  2040 ;; Return value:  Size  Location     Type
  2041 ;;                  1    wreg      unsigned char 
  2042 ;; Registers used:
  2043 ;;		wreg, status,2, status,0
  2044 ;; Tracked objects:
  2045 ;;		On entry : 0/0
  2046 ;;		On exit  : 0/0
  2047 ;;		Unchanged: 0/0
  2048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2049 ;;      Params:         0       0       0       0
  2050 ;;      Locals:         0       3       0       0
  2051 ;;      Temps:          0       1       0       0
  2052 ;;      Totals:         0       4       0       0
  2053 ;;Total ram usage:        4 bytes
  2054 ;; Hardware stack levels used:    1
  2055 ;; Hardware stack levels required when called:    2
  2056 ;; This function calls:
  2057 ;;		Nothing
  2058 ;; This function is called by:
  2059 ;;		_App_Step
  2060 ;; This function uses a non-reentrant model
  2061 ;;
  2062                           
  2063                           
  2064                           ;psect for function _Noise_Step
  2065  01F6                     _Noise_Step:	
  2066                           
  2067                           ;incstack = 0
  2068                           ; Regs used in _Noise_Step: [wreg+status,2+status,0]
  2069                           ;Noise_Step@bits stored from wreg
  2070  01F6  0020               	movlb	0	; select bank0
  2071  01F7  00DA               	movwf	Noise_Step@bits
  2072  01F8                     l909:	
  2073                           ;Voix.c: 8: while( -- bits )
  2074                           
  2075  01F8  3001               	movlw	1
  2076  01F9  02DA               	subwf	Noise_Step@bits,f
  2077  01FA  1903               	btfsc	3,2
  2078  01FB  2A21               	goto	l911
  2079                           
  2080                           ;Voix.c: 9: {
  2081                           ;Voix.c: 10: Noise_Seed <<= 1;
  2082  01FC  3001               	movlw	1
  2083  01FD                     u505:	
  2084  01FD  35CB               	lslf	_Noise_Seed,f
  2085  01FE  0DCC               	rlf	_Noise_Seed+1,f
  2086  01FF  0DCD               	rlf	_Noise_Seed+2,f
  2087  0200  0DCE               	rlf	_Noise_Seed+3,f
  2088  0201  0B89               	decfsz	9,f
  2089  0202  29FD               	goto	u505
  2090                           
  2091                           ;Voix.c: 11: bool a = ( Noise_Seed & 0x100000 ) > 0;
  2092  0203  1E4D               	btfss	_Noise_Seed+2,4
  2093  0204  2A07               	goto	u510
  2094  0205  3001               	movlw	1
  2095  0206  2A08               	goto	u520
  2096  0207                     u510:	
  2097  0207  3000               	movlw	0
  2098  0208                     u520:	
  2099  0208  00D9               	movwf	??_Noise_Step
  2100  0209  0859               	movf	??_Noise_Step,w
  2101  020A  00DB               	movwf	Noise_Step@a
  2102                           
  2103                           ;Voix.c: 12: bool b = ( Noise_Seed & 0x400000 ) > 0;
  2104  020B  1F4D               	btfss	_Noise_Seed+2,6
  2105  020C  2A0F               	goto	u530
  2106  020D  3001               	movlw	1
  2107  020E  2A10               	goto	u540
  2108  020F                     u530:	
  2109  020F  3000               	movlw	0
  2110  0210                     u540:	
  2111  0210  00D9               	movwf	??_Noise_Step
  2112  0211  0859               	movf	??_Noise_Step,w
  2113  0212  00DC               	movwf	Noise_Step@b
  2114                           
  2115                           ;Voix.c: 14: if( ( !a && b ) || ( a && !b ) ) Noise_Seed |= 1;
  2116  0213  085B               	movf	Noise_Step@a,w
  2117  0214  1D03               	btfss	3,2
  2118  0215  2A19               	goto	l905
  2119  0216  085C               	movf	Noise_Step@b,w
  2120  0217  1D03               	btfss	3,2
  2121  0218  2A1F               	goto	l158
  2122  0219                     l905:	
  2123  0219  085B               	movf	Noise_Step@a,w
  2124  021A  1903               	btfsc	3,2
  2125  021B  29F8               	goto	l909
  2126  021C  085C               	movf	Noise_Step@b,w
  2127  021D  1D03               	btfss	3,2
  2128  021E  29F8               	goto	l909
  2129  021F                     l158:	
  2130  021F  144B               	bsf	_Noise_Seed,0
  2131  0220  29F8               	goto	l909
  2132  0221                     l911:	
  2133                           
  2134                           ;Voix.c: 15: }
  2135                           ;Voix.c: 17: return Noise_Seed;
  2136  0221  084B               	movf	_Noise_Seed,w
  2137  0222  0008               	return
  2138  0223                     __end_of_Noise_Step:	
  2139                           
  2140                           	psect	text7
  2141  02A2                     __ptext7:	
  2142 ;; *************** function _ADC_Res *****************
  2143 ;; Defined at:
  2144 ;;		line 115 in file "C:\17\D\GitHub\17\PIC\1\16F18 VVVF - 01\Config.c"
  2145 ;; Parameters:    Size  Location     Type
  2146 ;;		None
  2147 ;; Auto vars:     Size  Location     Type
  2148 ;;		None
  2149 ;; Return value:  Size  Location     Type
  2150 ;;                  1    wreg      unsigned char 
  2151 ;; Registers used:
  2152 ;;		wreg
  2153 ;; Tracked objects:
  2154 ;;		On entry : 0/0
  2155 ;;		On exit  : 0/0
  2156 ;;		Unchanged: 0/0
  2157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2158 ;;      Params:         0       0       0       0
  2159 ;;      Locals:         0       0       0       0
  2160 ;;      Temps:          0       0       0       0
  2161 ;;      Totals:         0       0       0       0
  2162 ;;Total ram usage:        0 bytes
  2163 ;; Hardware stack levels used:    1
  2164 ;; Hardware stack levels required when called:    2
  2165 ;; This function calls:
  2166 ;;		Nothing
  2167 ;; This function is called by:
  2168 ;;		_App_Step
  2169 ;; This function uses a non-reentrant model
  2170 ;;
  2171                           
  2172                           
  2173                           ;psect for function _ADC_Res
  2174  02A2                     _ADC_Res:	
  2175                           
  2176                           ;Config.c: 117: return ADRESH;
  2177                           
  2178                           ;incstack = 0
  2179                           ; Regs used in _ADC_Res: [wreg]
  2180  02A2  0021               	movlb	1	; select bank1
  2181  02A3  081C               	movf	28,w	;volatile
  2182  02A4  0008               	return
  2183  02A5                     __end_of_ADC_Res:	
  2184                           
  2185                           	psect	text8
  2186  029E                     __ptext8:	
  2187 ;; *************** function _ADC_Go *****************
  2188 ;; Defined at:
  2189 ;;		line 106 in file "C:\17\D\GitHub\17\PIC\1\16F18 VVVF - 01\Config.c"
  2190 ;; Parameters:    Size  Location     Type
  2191 ;;		None
  2192 ;; Auto vars:     Size  Location     Type
  2193 ;;		None
  2194 ;; Return value:  Size  Location     Type
  2195 ;;                  1    wreg      void 
  2196 ;; Registers used:
  2197 ;;		wreg
  2198 ;; Tracked objects:
  2199 ;;		On entry : 0/0
  2200 ;;		On exit  : 0/0
  2201 ;;		Unchanged: 0/0
  2202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2203 ;;      Params:         0       0       0       0
  2204 ;;      Locals:         0       0       0       0
  2205 ;;      Temps:          0       0       0       0
  2206 ;;      Totals:         0       0       0       0
  2207 ;;Total ram usage:        0 bytes
  2208 ;; Hardware stack levels used:    1
  2209 ;; Hardware stack levels required when called:    2
  2210 ;; This function calls:
  2211 ;;		Nothing
  2212 ;; This function is called by:
  2213 ;;		_App_Step
  2214 ;; This function uses a non-reentrant model
  2215 ;;
  2216                           
  2217                           
  2218                           ;psect for function _ADC_Go
  2219  029E                     _ADC_Go:	
  2220                           
  2221                           ;Config.c: 108: ADCON0 =
  2222                           ;Config.c: 109: 1 << 0x0 |
  2223                           ;Config.c: 110: 1 << 0x1 |
  2224                           ;Config.c: 111: 2 << 0x2
  2225                           ;Config.c: 112: ;
  2226                           
  2227                           ;incstack = 0
  2228                           ; Regs used in _ADC_Go: [wreg]
  2229  029E  300B               	movlw	11
  2230  029F  0021               	movlb	1	; select bank1
  2231  02A0  009D               	movwf	29	;volatile
  2232  02A1  0008               	return
  2233  02A2                     __end_of_ADC_Go:	
  2234                           
  2235                           	psect	text9
  2236  0223                     __ptext9:	
  2237 ;; *************** function _Chip_Init *****************
  2238 ;; Defined at:
  2239 ;;		line 58 in file "C:\17\D\GitHub\17\PIC\1\16F18 VVVF - 01\Config.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;		None
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;		None
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  1    wreg      void 
  2246 ;; Registers used:
  2247 ;;		wreg, status,2, status,0
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2253 ;;      Params:         0       0       0       0
  2254 ;;      Locals:         0       0       0       0
  2255 ;;      Temps:          0       0       0       0
  2256 ;;      Totals:         0       0       0       0
  2257 ;;Total ram usage:        0 bytes
  2258 ;; Hardware stack levels used:    1
  2259 ;; Hardware stack levels required when called:    2
  2260 ;; This function calls:
  2261 ;;		Nothing
  2262 ;; This function is called by:
  2263 ;;		_main
  2264 ;; This function uses a non-reentrant model
  2265 ;;
  2266                           
  2267                           
  2268                           ;psect for function _Chip_Init
  2269  0223                     _Chip_Init:	
  2270                           
  2271                           ;Config.c: 62: OSCFRQbits.HFFRQ = 6;
  2272                           
  2273                           ;incstack = 0
  2274                           ; Regs used in _Chip_Init: [wreg+status,2+status,0]
  2275  0223  0032               	movlb	18	; select bank18
  2276  0224  081F               	movf	31,w	;volatile
  2277  0225  39F0               	andlw	-16
  2278  0226  3806               	iorlw	6
  2279  0227  009F               	movwf	31	;volatile
  2280                           
  2281                           ;Config.c: 66: ANSELA = 0b000100;
  2282  0228  3004               	movlw	4
  2283  0229  0023               	movlb	3	; select bank3
  2284  022A  008C               	movwf	12	;volatile
  2285                           
  2286                           ;Config.c: 67: TRISA = 0b000111;
  2287  022B  3007               	movlw	7
  2288  022C  0021               	movlb	1	; select bank1
  2289  022D  008C               	movwf	12	;volatile
  2290                           
  2291                           ;Config.c: 68: LATA = 0b000000;
  2292  022E  0022               	movlb	2	; select bank2
  2293  022F  018C               	clrf	12	;volatile
  2294                           
  2295                           ;Config.c: 70: RA5PPS = 0x0C;
  2296  0230  300C               	movlw	12
  2297  0231  003D               	movlb	29	; select bank29
  2298  0232  0095               	movwf	21	;volatile
  2299                           
  2300                           ;Config.c: 74: ADCON1 =
  2301                           ;Config.c: 75: 6 << 0x4
  2302                           ;Config.c: 76: ;
  2303  0233  3060               	movlw	96
  2304  0234  0021               	movlb	1	; select bank1
  2305  0235  009E               	movwf	30	;volatile
  2306                           
  2307                           ;Config.c: 80: PR2 = 250 - 1;
  2308  0236  30F9               	movlw	249
  2309  0237  0020               	movlb	0	; select bank0
  2310  0238  009E               	movwf	30	;volatile
  2311                           
  2312                           ;Config.c: 81: TMR2 = 0;
  2313  0239  019D               	clrf	29	;volatile
  2314                           
  2315                           ;Config.c: 82: T2CON =
  2316                           ;Config.c: 83: 0 << 0x0 |
  2317                           ;Config.c: 84: 0 << 0x3 |
  2318                           ;Config.c: 85: 1 << 0x2
  2319                           ;Config.c: 86: ;
  2320  023A  3004               	movlw	4
  2321  023B  009F               	movwf	31	;volatile
  2322                           
  2323                           ;Config.c: 88: CCPR1 = 0x100;
  2324  023C  3001               	movlw	1
  2325  023D  0025               	movlb	5	; select bank5
  2326  023E  0092               	movwf	18	;volatile
  2327  023F  3000               	movlw	0
  2328  0240  0091               	movwf	17	;volatile
  2329                           
  2330                           ;Config.c: 90: CCP1CON =
  2331                           ;Config.c: 91: 1 << 0x7 |
  2332                           ;Config.c: 92: 0x0F << 0x0
  2333                           ;Config.c: 93: ;
  2334  0241  308F               	movlw	143
  2335  0242  0093               	movwf	19	;volatile
  2336                           
  2337                           ;Config.c: 97: PIE1 =
  2338                           ;Config.c: 98: 1 << 0x1
  2339                           ;Config.c: 99: ;
  2340  0243  3002               	movlw	2
  2341  0244  0021               	movlb	1	; select bank1
  2342  0245  0091               	movwf	17	;volatile
  2343                           
  2344                           ;Config.c: 100: INTCON =
  2345                           ;Config.c: 101: 1 << 0x6 |
  2346                           ;Config.c: 102: 1 << 0x7
  2347                           ;Config.c: 103: ;
  2348  0246  30C0               	movlw	192
  2349  0247  008B               	movwf	11	;volatile
  2350  0248  0008               	return
  2351  0249                     __end_of_Chip_Init:	
  2352                           
  2353                           	psect	text10
  2354  0298                     __ptext10:	
  2355 ;; *************** function _App_Init *****************
  2356 ;; Defined at:
  2357 ;;		line 22 in file "C:\17\D\GitHub\17\PIC\1\16F18 VVVF - 01\App.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;		None
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;		None
  2362 ;; Return value:  Size  Location     Type
  2363 ;;                  1    wreg      void 
  2364 ;; Registers used:
  2365 ;;		wreg, status,2, status,0, pclath, cstack
  2366 ;; Tracked objects:
  2367 ;;		On entry : 0/0
  2368 ;;		On exit  : 0/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2371 ;;      Params:         0       0       0       0
  2372 ;;      Locals:         0       0       0       0
  2373 ;;      Temps:          0       0       0       0
  2374 ;;      Totals:         0       0       0       0
  2375 ;;Total ram usage:        0 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    3
  2378 ;; This function calls:
  2379 ;;		_Voix_Set_Speed
  2380 ;; This function is called by:
  2381 ;;		_main
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           
  2386                           ;psect for function _App_Init
  2387  0298                     _App_Init:	
  2388                           
  2389                           ;App.c: 24: Voix_Set_Speed( 0 );
  2390                           
  2391                           ;incstack = 0
  2392                           ; Regs used in _App_Init: [wreg+status,2+status,0+pclath+cstack]
  2393  0298  3000               	movlw	0
  2394  0299  0020               	movlb	0	; select bank0
  2395  029A  00D9               	movwf	Voix_Set_Speed@speed
  2396  029B  00DA               	movwf	Voix_Set_Speed@speed+1
  2397  029C  2041               	fcall	_Voix_Set_Speed
  2398  029D  0008               	return
  2399  029E                     __end_of_App_Init:	
  2400                           
  2401                           	psect	text11
  2402  0041                     __ptext11:	
  2403 ;; *************** function _Voix_Set_Speed *****************
  2404 ;; Defined at:
  2405 ;;		line 45 in file "C:\17\D\GitHub\17\PIC\1\16F18 VVVF - 01\Voix.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;  speed           2    0[BANK0 ] unsigned short 
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;  power           2    8[BANK0 ] unsigned short 
  2410 ;;  bias            2    6[BANK0 ] unsigned short 
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  1    wreg      void 
  2413 ;; Registers used:
  2414 ;;		wreg, status,2, status,0
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2420 ;;      Params:         0       2       0       0
  2421 ;;      Locals:         0       4       0       0
  2422 ;;      Temps:          0       4       0       0
  2423 ;;      Totals:         0      10       0       0
  2424 ;;Total ram usage:       10 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    2
  2427 ;; This function calls:
  2428 ;;		Nothing
  2429 ;; This function is called by:
  2430 ;;		_App_Init
  2431 ;;		_Train_Step
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           
  2436                           ;psect for function _Voix_Set_Speed
  2437  0041                     _Voix_Set_Speed:	
  2438                           
  2439                           ;Voix.c: 47: Vo.Run = speed > 0;
  2440                           
  2441                           ;incstack = 0
  2442                           ; Regs used in _Voix_Set_Speed: [wreg+status,2+status,0]
  2443  0041  0020               	movlb	0	; select bank0
  2444  0042  0859               	movf	Voix_Set_Speed@speed,w
  2445  0043  045A               	iorwf	Voix_Set_Speed@speed+1,w
  2446  0044  1903               	btfsc	3,2
  2447  0045  2849               	goto	u390
  2448  0046  0020               	movlb	0	; select bank0
  2449  0047  1438               	bsf	_Vo,0
  2450  0048  284B               	goto	l867
  2451  0049                     u390:	
  2452  0049  0020               	movlb	0	; select bank0
  2453  004A  1038               	bcf	_Vo,0
  2454  004B                     l867:	
  2455                           
  2456                           ;Voix.c: 49: if( Vo.Run )
  2457  004B  1C38               	btfss	_Vo,0
  2458  004C  28C9               	goto	l889
  2459                           
  2460                           ;Voix.c: 50: {
  2461                           ;Voix.c: 51: uint16 bias = 0x200;
  2462  004D  3000               	movlw	0
  2463  004E  00DF               	movwf	Voix_Set_Speed@bias
  2464  004F  3002               	movlw	2
  2465  0050  00E0               	movwf	Voix_Set_Speed@bias+1
  2466                           
  2467                           ;Voix.c: 52: uint16 power = ( speed >> 4 ) + bias;
  2468  0051  085A               	movf	Voix_Set_Speed@speed+1,w
  2469  0052  00DC               	movwf	??_Voix_Set_Speed+1
  2470  0053  0859               	movf	Voix_Set_Speed@speed,w
  2471  0054  00DB               	movwf	??_Voix_Set_Speed
  2472  0055  3004               	movlw	4
  2473  0056                     u425:	
  2474  0056  36DC               	lsrf	??_Voix_Set_Speed+1,f
  2475  0057  0CDB               	rrf	??_Voix_Set_Speed,f
  2476  0058  0B89               	decfsz	9,f
  2477  0059  2856               	goto	u425
  2478  005A  085F               	movf	Voix_Set_Speed@bias,w
  2479  005B  075B               	addwf	??_Voix_Set_Speed,w
  2480  005C  00E1               	movwf	Voix_Set_Speed@power
  2481  005D  0860               	movf	Voix_Set_Speed@bias+1,w
  2482  005E  3D5C               	addwfc	??_Voix_Set_Speed+1,w
  2483  005F  00E2               	movwf	Voix_Set_Speed@power+1
  2484                           
  2485                           ;Voix.c: 54: if( power > 0x0FFF ) power = 0x0FFF;
  2486  0060  3010               	movlw	16
  2487  0061  0262               	subwf	Voix_Set_Speed@power+1,w
  2488  0062  3000               	movlw	0
  2489  0063  1903               	skipnz
  2490  0064  0261               	subwf	Voix_Set_Speed@power,w
  2491  0065  1C03               	skipc
  2492  0066  286B               	goto	l877
  2493  0067  30FF               	movlw	255
  2494  0068  00E1               	movwf	Voix_Set_Speed@power
  2495  0069  300F               	movlw	15
  2496  006A  00E2               	movwf	Voix_Set_Speed@power+1
  2497  006B                     l877:	
  2498                           
  2499                           ;Voix.c: 59: Vo_DC = ( power >> 3 );
  2500  006B  0862               	movf	Voix_Set_Speed@power+1,w
  2501  006C  00DC               	movwf	??_Voix_Set_Speed+1
  2502  006D  0861               	movf	Voix_Set_Speed@power,w
  2503  006E  00DB               	movwf	??_Voix_Set_Speed
  2504  006F  36DC               	lsrf	??_Voix_Set_Speed+1,f
  2505  0070  0CDB               	rrf	??_Voix_Set_Speed,f
  2506  0071  36DC               	lsrf	??_Voix_Set_Speed+1,f
  2507  0072  0CDB               	rrf	??_Voix_Set_Speed,f
  2508  0073  36DC               	lsrf	??_Voix_Set_Speed+1,f
  2509  0074  0CDB               	rrf	??_Voix_Set_Speed,f
  2510  0075  085B               	movf	??_Voix_Set_Speed,w
  2511  0076  00AC               	movwf	_Vo_DC
  2512  0077  085C               	movf	??_Voix_Set_Speed+1,w
  2513  0078  00AD               	movwf	_Vo_DC+1
  2514                           
  2515                           ;Voix.c: 61: Vo_1_Width = ( power >> 4 );
  2516  0079  0862               	movf	Voix_Set_Speed@power+1,w
  2517  007A  00DC               	movwf	??_Voix_Set_Speed+1
  2518  007B  0861               	movf	Voix_Set_Speed@power,w
  2519  007C  00DB               	movwf	??_Voix_Set_Speed
  2520  007D  3004               	movlw	4
  2521  007E                     u445:	
  2522  007E  36DC               	lsrf	??_Voix_Set_Speed+1,f
  2523  007F  0CDB               	rrf	??_Voix_Set_Speed,f
  2524  0080  0B89               	decfsz	9,f
  2525  0081  287E               	goto	u445
  2526  0082  085B               	movf	??_Voix_Set_Speed,w
  2527  0083  00DD               	movwf	??_Voix_Set_Speed+2
  2528  0084  085D               	movf	??_Voix_Set_Speed+2,w
  2529  0085  00B7               	movwf	_Vo_1_Width
  2530                           
  2531                           ;Voix.c: 62: Vo_2_Width = ( power >> 4 );
  2532  0086  0862               	movf	Voix_Set_Speed@power+1,w
  2533  0087  00DC               	movwf	??_Voix_Set_Speed+1
  2534  0088  0861               	movf	Voix_Set_Speed@power,w
  2535  0089  00DB               	movwf	??_Voix_Set_Speed
  2536  008A  3004               	movlw	4
  2537  008B                     u455:	
  2538  008B  36DC               	lsrf	??_Voix_Set_Speed+1,f
  2539  008C  0CDB               	rrf	??_Voix_Set_Speed,f
  2540  008D  0B89               	decfsz	9,f
  2541  008E  288B               	goto	u455
  2542  008F  085B               	movf	??_Voix_Set_Speed,w
  2543  0090  00DD               	movwf	??_Voix_Set_Speed+2
  2544  0091  085D               	movf	??_Voix_Set_Speed+2,w
  2545  0092  00B6               	movwf	_Vo_2_Width
  2546                           
  2547                           ;Voix.c: 64: if( speed >= 0x0A00 )
  2548  0093  300A               	movlw	10
  2549  0094  025A               	subwf	Voix_Set_Speed@speed+1,w
  2550  0095  3000               	movlw	0
  2551  0096  1903               	skipnz
  2552  0097  0259               	subwf	Voix_Set_Speed@speed,w
  2553  0098  1C03               	skipc
  2554  0099  28C0               	goto	l887
  2555                           
  2556                           ;Voix.c: 65: {
  2557                           ;Voix.c: 66: Vo_1_Freq = ( speed >> 6 );
  2558  009A  085A               	movf	Voix_Set_Speed@speed+1,w
  2559  009B  00DC               	movwf	??_Voix_Set_Speed+1
  2560  009C  0859               	movf	Voix_Set_Speed@speed,w
  2561  009D  00DB               	movwf	??_Voix_Set_Speed
  2562  009E  3006               	movlw	6
  2563  009F                     u475:	
  2564  009F  36DC               	lsrf	??_Voix_Set_Speed+1,f
  2565  00A0  0CDB               	rrf	??_Voix_Set_Speed,f
  2566  00A1  0B89               	decfsz	9,f
  2567  00A2  289F               	goto	u475
  2568  00A3  085B               	movf	??_Voix_Set_Speed,w
  2569  00A4  00D1               	movwf	_Vo_1_Freq
  2570  00A5  085C               	movf	??_Voix_Set_Speed+1,w
  2571  00A6  00D2               	movwf	_Vo_1_Freq+1
  2572                           
  2573                           ;Voix.c: 67: Vo_2_Freq = ( speed >> 6 ) + ( speed >> 4 );
  2574  00A7  085A               	movf	Voix_Set_Speed@speed+1,w
  2575  00A8  00DC               	movwf	??_Voix_Set_Speed+1
  2576  00A9  0859               	movf	Voix_Set_Speed@speed,w
  2577  00AA  00DB               	movwf	??_Voix_Set_Speed
  2578  00AB  3004               	movlw	4
  2579  00AC                     u485:	
  2580  00AC  36DC               	lsrf	??_Voix_Set_Speed+1,f
  2581  00AD  0CDB               	rrf	??_Voix_Set_Speed,f
  2582  00AE  0B89               	decfsz	9,f
  2583  00AF  28AC               	goto	u485
  2584  00B0  085A               	movf	Voix_Set_Speed@speed+1,w
  2585  00B1  00DE               	movwf	??_Voix_Set_Speed+3
  2586  00B2  0859               	movf	Voix_Set_Speed@speed,w
  2587  00B3  00DD               	movwf	??_Voix_Set_Speed+2
  2588  00B4  3006               	movlw	6
  2589  00B5                     u495:	
  2590  00B5  36DE               	lsrf	??_Voix_Set_Speed+3,f
  2591  00B6  0CDD               	rrf	??_Voix_Set_Speed+2,f
  2592  00B7  0B89               	decfsz	9,f
  2593  00B8  28B5               	goto	u495
  2594  00B9  085B               	movf	??_Voix_Set_Speed,w
  2595  00BA  075D               	addwf	??_Voix_Set_Speed+2,w
  2596  00BB  00CF               	movwf	_Vo_2_Freq
  2597  00BC  085C               	movf	??_Voix_Set_Speed+1,w
  2598  00BD  3D5E               	addwfc	??_Voix_Set_Speed+3,w
  2599  00BE  00D0               	movwf	_Vo_2_Freq+1
  2600                           
  2601                           ;Voix.c: 68: }
  2602  00BF  0008               	return
  2603  00C0                     l887:	
  2604                           
  2605                           ;Voix.c: 69: else
  2606                           ;Voix.c: 70: {
  2607                           ;Voix.c: 71: Vo_1_Freq = ( ( 200 ) * 65536 / 32000 );
  2608  00C0  3099               	movlw	153
  2609  00C1  00D1               	movwf	_Vo_1_Freq
  2610  00C2  3001               	movlw	1
  2611  00C3  00D2               	movwf	_Vo_1_Freq+1
  2612                           
  2613                           ;Voix.c: 72: Vo_2_Freq = ( ( 400 ) * 65536 / 32000 );
  2614  00C4  3033               	movlw	51
  2615  00C5  00CF               	movwf	_Vo_2_Freq
  2616  00C6  3003               	movlw	3
  2617  00C7  00D0               	movwf	_Vo_2_Freq+1
  2618                           
  2619                           ;Voix.c: 73: }
  2620                           ;Voix.c: 74: }
  2621  00C8  0008               	return
  2622  00C9                     l889:	
  2623                           
  2624                           ;Voix.c: 75: else
  2625                           ;Voix.c: 76: {
  2626                           ;Voix.c: 77: Vo_DC = 0x0060;
  2627  00C9  3060               	movlw	96
  2628  00CA  00AC               	movwf	_Vo_DC
  2629  00CB  3000               	movlw	0
  2630  00CC  00AD               	movwf	_Vo_DC+1
  2631  00CD  0008               	return
  2632  00CE                     __end_of_Voix_Set_Speed:	
  2633                           
  2634                           	psect	intentry
  2635  0004                     __pintentry:	
  2636 ;; *************** function _ISR *****************
  2637 ;; Defined at:
  2638 ;;		line 40 in file "C:\17\D\GitHub\17\PIC\1\16F18 VVVF - 01\Main.c"
  2639 ;; Parameters:    Size  Location     Type
  2640 ;;		None
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;		None
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  1    wreg      void 
  2645 ;; Registers used:
  2646 ;;		wreg, status,2, status,0, pclath, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2652 ;;      Params:         0       0       0       0
  2653 ;;      Locals:         0       0       0       0
  2654 ;;      Temps:          2       0       0       0
  2655 ;;      Totals:         2       0       0       0
  2656 ;;Total ram usage:        2 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    1
  2659 ;; This function calls:
  2660 ;;		_Voix_int_Step
  2661 ;; This function is called by:
  2662 ;;		Interrupt level 1
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666  0004                     _ISR:	
  2667                           
  2668                           ;incstack = 0
  2669  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2670                           
  2671                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  2672  0005  3180               	pagesel	$
  2673  0006  0020               	movlb	0	; select bank0
  2674  0007  087F               	movf	127,w
  2675  0008  00FD               	movwf	??_ISR+1
  2676                           
  2677                           ;Main.c: 42: if( TMR2IF )
  2678  0009  1C91               	btfss	17,1	;volatile
  2679  000A  281E               	goto	i1l35
  2680                           
  2681                           ;Main.c: 43: {
  2682                           ;Main.c: 44: TMR2IF = 0;
  2683  000B  1091               	bcf	17,1	;volatile
  2684                           
  2685                           ;Main.c: 46: if( -- MidTick_DivCtr == 0 )
  2686  000C  3001               	movlw	1
  2687  000D  02D8               	subwf	_MidTick_DivCtr,f
  2688  000E  1D03               	btfss	3,2
  2689  000F  2818               	goto	i1l1059
  2690                           
  2691                           ;Main.c: 47: {
  2692                           ;Main.c: 48: MidTick_DivCtr = 32;
  2693  0010  3020               	movlw	32
  2694  0011  00FC               	movwf	??_ISR
  2695  0012  087C               	movf	??_ISR,w
  2696  0013  00D8               	movwf	_MidTick_DivCtr
  2697                           
  2698                           ;Main.c: 49: MidTick_Task ++;
  2699  0014  3001               	movlw	1
  2700  0015  00FC               	movwf	??_ISR
  2701  0016  087C               	movf	??_ISR,w
  2702  0017  07BE               	addwf	_MidTick_Task,f
  2703  0018                     i1l1059:	
  2704                           
  2705                           ;Main.c: 50: }
  2706                           ;Main.c: 52: CCPR1= Voix_int_Step();
  2707  0018  212D               	fcall	_Voix_int_Step
  2708  0019  0871               	movf	?_Voix_int_Step+1,w
  2709  001A  0025               	movlb	5	; select bank5
  2710  001B  0092               	movwf	18	;volatile
  2711  001C  0870               	movf	?_Voix_int_Step,w
  2712  001D  0091               	movwf	17	;volatile
  2713  001E                     i1l35:	
  2714  001E  087D               	movf	??_ISR+1,w
  2715  001F  0020               	movlb	0	; select bank0
  2716  0020  00FF               	movwf	127
  2717  0021  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2718  0022  0009               	retfie
  2719  0023                     __end_of_ISR:	
  2720                           
  2721                           	psect	text13
  2722  012D                     __ptext13:	
  2723 ;; *************** function _Voix_int_Step *****************
  2724 ;; Defined at:
  2725 ;;		line 81 in file "C:\17\D\GitHub\17\PIC\1\16F18 VVVF - 01\Voix.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;		None
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;  acc             2   10[COMMON] unsigned short 
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  2    0[COMMON] unsigned short 
  2732 ;; Registers used:
  2733 ;;		wreg, status,2, status,0
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2739 ;;      Params:         2       0       0       0
  2740 ;;      Locals:         6       0       0       0
  2741 ;;      Temps:          4       0       0       0
  2742 ;;      Totals:        12       0       0       0
  2743 ;;Total ram usage:       12 bytes
  2744 ;; Hardware stack levels used:    1
  2745 ;; This function calls:
  2746 ;;		Nothing
  2747 ;; This function is called by:
  2748 ;;		_ISR
  2749 ;; This function uses a non-reentrant model
  2750 ;;
  2751                           
  2752                           
  2753                           ;psect for function _Voix_int_Step
  2754  012D                     _Voix_int_Step:	
  2755                           
  2756                           ;Voix.c: 83: uint16 acc = Vo_DC;
  2757                           
  2758                           ;incstack = 0
  2759                           ; Regs used in _Voix_int_Step: [wreg+status,2+status,0]
  2760  012D  0020               	movlb	0	; select bank0
  2761  012E  082D               	movf	_Vo_DC+1,w
  2762  012F  00FB               	movwf	Voix_int_Step@acc+1
  2763  0130  082C               	movf	_Vo_DC,w
  2764  0131  00FA               	movwf	Voix_int_Step@acc
  2765                           
  2766                           ;Voix.c: 85: if( Vo.Run )
  2767  0132  1C38               	btfss	_Vo,0
  2768  0133  297C               	goto	i1l195
  2769                           
  2770                           ;Voix.c: 86: {
  2771                           ;Voix.c: 87: Vo_1_Phase += Vo_1_Freq;
  2772  0134  0851               	movf	_Vo_1_Freq,w
  2773  0135  07AA               	addwf	_Vo_1_Phase,f
  2774  0136  0852               	movf	_Vo_1_Freq+1,w
  2775  0137  3DAB               	addwfc	_Vo_1_Phase+1,f
  2776                           
  2777                           ;Voix.c: 88: Vo_2_Phase += Vo_2_Freq;
  2778  0138  084F               	movf	_Vo_2_Freq,w
  2779  0139  07A8               	addwf	_Vo_2_Phase,f
  2780  013A  0850               	movf	_Vo_2_Freq+1,w
  2781  013B  3DA9               	addwfc	_Vo_2_Phase+1,f
  2782                           
  2783                           ;Voix.c: 90: acc += ( ( ( Vo_1_Phase >> 8 ) < Vo_1_Width ) ? Vo_1_Amp : 0 );
  2784  013C  0837               	movf	_Vo_1_Width,w
  2785  013D  00F2               	movwf	??_Voix_int_Step
  2786  013E  01F3               	clrf	??_Voix_int_Step+1
  2787  013F  082B               	movf	_Vo_1_Phase+1,w
  2788  0140  00F5               	movwf	??_Voix_int_Step+3
  2789  0141  082A               	movf	_Vo_1_Phase,w
  2790  0142  00F4               	movwf	??_Voix_int_Step+2
  2791  0143  0875               	movf	??_Voix_int_Step+3,w
  2792  0144  00F4               	movwf	??_Voix_int_Step+2
  2793  0145  01F5               	clrf	??_Voix_int_Step+3
  2794  0146  0873               	movf	??_Voix_int_Step+1,w
  2795  0147  0275               	subwf	??_Voix_int_Step+3,w
  2796  0148  1D03               	skipz
  2797  0149  294C               	goto	u72_25
  2798  014A  0872               	movf	??_Voix_int_Step,w
  2799  014B  0274               	subwf	??_Voix_int_Step+2,w
  2800  014C                     u72_25:	
  2801  014C  1C03               	skipc
  2802  014D  2951               	goto	i1l1031
  2803  014E  01F6               	clrf	_Voix_int_Step$164
  2804  014F  01F7               	clrf	_Voix_int_Step$164+1
  2805  0150  2958               	goto	i1l199
  2806  0151                     i1l1031:	
  2807  0151  0856               	movf	_Vo_1_Amp,w
  2808  0152  00F2               	movwf	??_Voix_int_Step
  2809  0153  01F3               	clrf	??_Voix_int_Step+1
  2810  0154  0872               	movf	??_Voix_int_Step,w
  2811  0155  00F6               	movwf	_Voix_int_Step$164
  2812  0156  0873               	movf	??_Voix_int_Step+1,w
  2813  0157  00F7               	movwf	_Voix_int_Step$164+1
  2814  0158                     i1l199:	
  2815  0158  0876               	movf	_Voix_int_Step$164,w
  2816  0159  07FA               	addwf	Voix_int_Step@acc,f
  2817  015A  0877               	movf	_Voix_int_Step$164+1,w
  2818  015B  3DFB               	addwfc	Voix_int_Step@acc+1,f
  2819                           
  2820                           ;Voix.c: 91: acc += ( ( ( Vo_2_Phase >> 8 ) < Vo_2_Width ) ? Vo_2_Amp : 0 );
  2821  015C  0836               	movf	_Vo_2_Width,w
  2822  015D  00F2               	movwf	??_Voix_int_Step
  2823  015E  01F3               	clrf	??_Voix_int_Step+1
  2824  015F  0829               	movf	_Vo_2_Phase+1,w
  2825  0160  00F5               	movwf	??_Voix_int_Step+3
  2826  0161  0828               	movf	_Vo_2_Phase,w
  2827  0162  00F4               	movwf	??_Voix_int_Step+2
  2828  0163  0875               	movf	??_Voix_int_Step+3,w
  2829  0164  00F4               	movwf	??_Voix_int_Step+2
  2830  0165  01F5               	clrf	??_Voix_int_Step+3
  2831  0166  0873               	movf	??_Voix_int_Step+1,w
  2832  0167  0275               	subwf	??_Voix_int_Step+3,w
  2833  0168  1D03               	skipz
  2834  0169  296C               	goto	u73_25
  2835  016A  0872               	movf	??_Voix_int_Step,w
  2836  016B  0274               	subwf	??_Voix_int_Step+2,w
  2837  016C                     u73_25:	
  2838  016C  1C03               	skipc
  2839  016D  2971               	goto	i1l1037
  2840  016E  01F8               	clrf	_Voix_int_Step$165
  2841  016F  01F9               	clrf	_Voix_int_Step$165+1
  2842  0170  2978               	goto	i1l203
  2843  0171                     i1l1037:	
  2844  0171  0855               	movf	_Vo_2_Amp,w
  2845  0172  00F2               	movwf	??_Voix_int_Step
  2846  0173  01F3               	clrf	??_Voix_int_Step+1
  2847  0174  0872               	movf	??_Voix_int_Step,w
  2848  0175  00F8               	movwf	_Voix_int_Step$165
  2849  0176  0873               	movf	??_Voix_int_Step+1,w
  2850  0177  00F9               	movwf	_Voix_int_Step$165+1
  2851  0178                     i1l203:	
  2852  0178  0878               	movf	_Voix_int_Step$165,w
  2853  0179  07FA               	addwf	Voix_int_Step@acc,f
  2854  017A  0879               	movf	_Voix_int_Step$165+1,w
  2855  017B  3DFB               	addwfc	Voix_int_Step@acc+1,f
  2856  017C                     i1l195:	
  2857                           
  2858                           ;Voix.c: 92: }
  2859                           ;Voix.c: 94: return acc;
  2860  017C  087B               	movf	Voix_int_Step@acc+1,w
  2861  017D  00F1               	movwf	?_Voix_int_Step+1
  2862  017E  087A               	movf	Voix_int_Step@acc,w
  2863  017F  00F0               	movwf	?_Voix_int_Step
  2864  0180  0008               	return
  2865  0181                     __end_of_Voix_int_Step:	
  2866  007E                     btemp	set	126	;btemp
  2867  007E                     int$flags	set	126
  2868  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    1
    Data        40
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     21      78
    BANK1            80      0      14
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_Voix_int_Step

Critical Paths under _main in BANK0

    _MidTick_Step->_App_Step
    _App_Step->_Train_Step
    _Vol_1_Change->_Train_Set_Acc
    _Train_Step->_Voix_Set_Speed
    _App_Init->_Voix_Set_Speed

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1315
                           _App_Init
                          _Chip_Init
                       _MidTick_Step
 ---------------------------------------------------------------------------------
 (1) _MidTick_Step                                         0     0      0     964
                           _App_Step
 ---------------------------------------------------------------------------------
 (2) _App_Step                                             5     5      0     964
                                             16 BANK0      5     5      0
                             _ADC_Go
                            _ADC_Res
                         _Noise_Step
                         _Train_Step
                       _Vol_1_Change
 ---------------------------------------------------------------------------------
 (3) _Vol_1_Change                                         3     3      0     411
                                              4 BANK0      3     3      0
                      _Train_Set_Acc
 ---------------------------------------------------------------------------------
 (4) _Train_Set_Acc                                        4     1      3     256
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (3) _Train_Step                                           6     6      0     352
                                             10 BANK0      6     6      0
                     _Voix_Set_Speed
 ---------------------------------------------------------------------------------
 (3) _Noise_Step                                           4     4      0     112
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Res                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Go                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Chip_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _App_Init                                             0     0      0     351
                     _Voix_Set_Speed
 ---------------------------------------------------------------------------------
 (4) _Voix_Set_Speed                                      10     8      2     351
                                              0 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  2     2      0      73
                                             12 COMMON     2     2      0
                      _Voix_int_Step
 ---------------------------------------------------------------------------------
 (6) _Voix_int_Step                                       12    10      2      73
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _App_Init
     _Voix_Set_Speed
   _Chip_Init
   _MidTick_Step
     _App_Step
       _ADC_Go
       _ADC_Res
       _Noise_Step
       _Train_Step
         _Voix_Set_Speed
       _Vol_1_Change
         _Train_Set_Acc

 _ISR (ROOT)
   _Voix_int_Step

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      6A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     15      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       E       8       17.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      6A      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Nov 19 07:33:22 2017

            __CFG_CP$OFF 0000                       l79 012C                       _Vo 0038  
                    l158 021F                      l911 0221                      l905 0219  
                    l931 01E1                      l909 01F8                      l953 01B5  
                    l867 004B                      l955 01B7                      l947 01A3  
                    l877 006B                      l949 01A8                      l981 011B  
                    l965 00E7                      l887 00C0                      l983 011D  
                    l975 0111                      l967 00E9                      l889 00C9  
                    l987 0120                      u510 0207                      _PR2 001E  
                    u520 0208                      u425 0056                      u505 01FD  
                    u530 020F             __CFG_CPD$OFF 0000                      u540 0210  
                    _ISR 0004                      u445 007E                      u605 01C1  
                    u390 0049                      u455 008B                      u475 009F  
                    u485 00AC                      u495 00B5                      u665 019C  
                    u675 01AE                      u695 0102          __end_of_ADC_Res 02A5  
                    wreg 0009         Train_Set_Acc@acc 0059             __CFG_LVP$OFF 0000  
                   ?_ISR 0070                     l1043 0273                     _LATA 010C  
                   _PIE1 0091                     i1l35 001E                     _TMR2 001D  
         ??_MidTick_Step 006E             __CFG_WRT$OFF 0000                     _main 0271  
                   fsr0h 0005                     fsr1h 0007                     indf0 0000  
                   fsr0l 0004                     fsr1l 0006                     btemp 007E  
          __CFG_BOREN$ON 0000            __CFG_BORV$LOW 0000                     start 0023  
          __CFG_CSWEN$ON 0000           _Voix_Set_Speed 0041               _App_Output 0030  
                  ??_ISR 007C                    ?_main 0070                    _CCPR1 0291  
          __CFG_WDTE$OFF 0000                    _T2CON 001F           __CFG_DEBUG$OFF 0000  
                  i1l203 0178                    i1l195 017C                    i1l199 0158  
          _Voix_int_Step 012D                    u72_25 014C                    _TRISA 008C  
                  u73_25 016C            __CFG_PWRTE$ON 0000           __CFG_FCMEN$OFF 0000  
                  _Vo_DC 002C                    _Vol_1 003C                    status 0003  
                  wtemp0 007E         __end_of_App_Init 029E         __end_of_App_Step 012D  
 __end_of_Voix_Set_Speed 00CE           __CFG_MCLRE$OFF 0000          __initialization 0024  
           __end_of_main 027B       __size_of_Chip_Init 0026                ??_ADC_Res 0059  
                 ??_main 006E           ?_Voix_int_Step 0070               _Vo_1_Phase 002A  
             _Vo_2_Phase 0028               _Vo_1_Width 0037               _Vo_2_Width 0036  
                 _ADCON0 009D                   _ADCON1 009E                   _ADC_Go 029E  
                 _ADRESH 009C                   _ANSELA 018C                   _RA5PPS 0E95  
                 i1l1031 0151                   i1l1037 0171                   i1l1059 0018  
                 _INTCON 000B                   _TMR2IF 0089               _Noise_Seed 004B  
             _Noise_Step 01F6          ?_Voix_Set_Speed 0059           __CFG_STVREN$ON 0000  
   __end_of_MidTick_Step 028C          _App_Tempo_Phase 0032               _Train_Step 0181  
             _Vol_margin 02A5        __end_of_Chip_Init 0249  __end_of__initialization 003E  
         __pcstackCOMMON 0070             __pidataBANK0 0249             __pidataBANK1 0263  
        ??_Voix_int_Step 0072                ?_App_Init 0070                ?_App_Step 0070  
                ?_ADC_Go 0070              Noise_Step@a 005B              Noise_Step@b 005C  
             __pbssBANK0 0020              ?_Noise_Step 0070               __pmaintext 0271  
  __end_of_Train_Set_Acc 0285               __pintentry 0004                  _CCP1CON 0293  
                _ADC_Res 02A2      __CFG_RSTOSC$HFINT32 0000              ?_Train_Step 0070  
                _LED_Ctr 0034            ?_Vol_1_Change 0070               ??_App_Init 0063  
             ??_App_Step 0069          __size_of_ADC_Go 0004                  _Vo_WT_1 0020  
             _down_table 003F                  _Vol_1_s 003B            App_Step@phase 003A  
  __size_of_MidTick_Step 0007                  __ptext1 0285                  __ptext2 00CE  
                __ptext3 01BD                  __ptext4 027B                  __ptext5 0181  
                __ptext6 01F6                  __ptext7 02A2                  __ptext8 029E  
                __ptext9 0223             __size_of_ISR 001F      __size_of_Noise_Step 002D  
         ??_Vol_1_Change 005D                  clrloop0 0293     end_of_initialization 003E  
       ??_Voix_Set_Speed 005B        _Voix_int_Step$164 0076        _Voix_int_Step$165 0078  
                init_ram 028C             _MidTick_Task 003E              _Train_Speed 0053  
           _MidTick_Step 0285                  initloop 028D      __size_of_Train_Step 003C  
            Train_Step@s 0067             __pstringtext 02A5           Noise_Step@bits 005A  
       __CFG_FEXTOSC$OFF 0000           __end_of_ADC_Go 02A2          Train_Set_Acc@up 005B  
              _Chip_Init 0223                _App_Noise 003D                _App_Tempo 0057  
    start_initialization 0024              __end_of_ISR 0023                 ??_ADC_Go 0059  
      __size_of_App_Init 0006        __size_of_App_Step 005F                _Vo_1_Freq 0051  
              _Vo_2_Freq 004F             ??_Noise_Step 0059               ?_Chip_Init 0070  
   __end_of_Vol_1_Change 01F6         __CFG_LPBOREN$OFF 0000            Vol_1_Change@s 005F  
            __pdataBANK0 003F              __pdataBANK1 00A0                _Train_Acc 002E  
               ?_ADC_Res 0070    __end_of_Voix_int_Step 0181         Voix_int_Step@acc 007A  
           ??_Train_Step 0063       __end_of_Noise_Step 0223                ___latbits 0000  
          __pcstackBANK0 0059       __end_of_Train_Step 01BD         __CFG_PPS1WAY$OFF 0000  
     __end_of_Vol_margin 02A6   __size_of_Train_Set_Acc 000A                clear_ram0 0292  
            ??_Chip_Init 0059         __size_of_ADC_Res 0003      Voix_Set_Speed@speed 0059  
    Voix_Set_Speed@power 0061                 _App_Init 0298                 _App_Step 00CE  
  __size_of_Vol_1_Change 0039                 _Vo_1_Amp 0056                 _Vo_2_Amp 0055  
         _MidTick_DivCtr 0058            _Train_Set_Acc 027B                 _Train_Up 0039  
           _Vol_1_Change 01BD                 __ptext10 0298                 __ptext11 0041  
               __ptext13 012D              App_Step@vol 006D            __size_of_main 000A  
         ?_Train_Set_Acc 0059  __size_of_Voix_Set_Speed 008D                 int$flags 007E  
               _up_table 00A0       Voix_Set_Speed@bias 005F                 intlevel1 0000  
      __CFG_CLKOUTEN$OFF 0000               _OSCFRQbits 091F            ?_MidTick_Step 0070  
 __size_of_Voix_int_Step 0054          ??_Train_Set_Acc 005C  
